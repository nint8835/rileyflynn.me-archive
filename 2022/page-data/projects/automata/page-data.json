{"componentChunkName":"component---src-templates-project-tsx","path":"/projects/automata","result":{"data":{"mdx":{"frontmatter":{"title":"Automata","summary":"Discord bot for the MUN Computer Science Society Discord server.","links":[{"label":"GitHub","variant":"primary","url":"https://github.com/MUNComputerScienceSociety/automata"}],"project":{"tags":["python","discord","bot"]}},"wordCount":{"words":190},"body":"var _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar _frontmatter = {\n  \"type\": \"project\",\n  \"title\": \"Automata\",\n  \"summary\": \"Discord bot for the MUN Computer Science Society Discord server.\",\n  \"previewImage\": \"../assets/projects/automata.png\",\n  \"links\": [{\n    \"label\": \"GitHub\",\n    \"variant\": \"primary\",\n    \"url\": \"https://github.com/MUNComputerScienceSociety/automata\"\n  }],\n  \"project\": {\n    \"tags\": [\"python\", \"discord\", \"bot\"]\n  }\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"About\"), mdx(\"p\", null, \"During my time as Vice President of the MUN Computer Science Society, I lead a migration from our old Slack community to a new Discord-based community. As part of this, we ran into features that were provided by Slack, but lacking in Discord - primarily email verification, requiring a valid university email to join the server.\"), mdx(\"p\", null, \"Enter Automata - the CS Society's Discord bot. I initially built it to handle email verifications (by working in combination with the minimal \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/MUNComputerScienceSociety/DiscordAuth\"\n  }, \"DiscordAuth\"), \" site I built to handle OAuth sign-in through Google for MUN email accounts), but it has since grown into a large multi-purpose bot that handles a wide variety of things for the society.\"), mdx(\"p\", null, \"In addition to providing useful functionality for the society, it also acts as a teaching tool for new members joining the society who want to get more familiar with working with things like GitHub & Git. The society has held a number of workshops taking students through the process of opening a GitHub account, forking the repo, getting their own changes made & tested, and finally getting them merged back in to the main repo where everyone can use them.\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"1897a43c-8432-56c3-948d-8500572603ab"}},"staticQueryHashes":["2702387953","3861909122"]}