{"version":3,"file":"4de7ad8f40bedac92f1c15ddcea5cdba783cd9f4-a689f551740a7a3d1fef.js","mappings":"qLACA,GACE,aAAc,kCACd,KAAQ,6BACR,2BAA4B,iDAC5B,iBAAkB,uCAClB,KAAQ,6BACR,cAAe,oCACf,KAAQ,4BACR,cAAe,oCACf,cAAe,oCACf,cAAe,oCACf,cAAe,oCACf,cAAe,oCACf,cAAe,oCACf,cAAe,oCACf,cAAe,oCACf,eAAgB,qCAChB,eAAgB,qCAChB,eAAgB,qCAChB,eAAgB,qCAChB,eAAgB,qCAChB,eAAgB,qCAChB,eAAgB,qCAChB,eAAgB,qCAChB,eAAgB,qCAChB,eAAgB,qCAChB,eAAgB,qCAChB,oBAAqB,0CACrB,QAAW,gCACX,MAAS,8BACT,aAAc,mCACd,cAAe,oCACf,oBAAqB,0CACrB,kBAAmB,wCACnB,gBAAiB,sCACjB,QAAW,gCACX,iBAAkB,uCAClB,kBAAmB,yCCpCjBA,EAFS,CAAC,KAAM,KAAM,KAAM,IAAK,KAELC,KAAI,SAAUC,EAAOC,EAAOC,GAC1D,MAAO,CACLC,SAAUH,EACVI,MAAOF,EAAOG,OAAS,EAAIJ,EAE/B,I,4JCgBIK,EAAQ,cAAiB,SAAUC,EAAIC,GACzC,IAAIC,EAAKF,EAAGG,MACVA,OAAe,IAAPD,EAAgB,GAAKA,EAC7BE,EAAiBJ,EAAGI,eACpBC,EAAKL,EAAGM,YACRA,OAAqB,IAAPD,EAAgB,GAAKA,EACnCE,EAASP,EAAGO,OACZC,EAASR,EAAGQ,OACZC,EAAaT,EAAGS,WAChBC,EAAcV,EAAGU,YACjBC,EAAQX,EAAGW,MACXC,EAAUZ,EAAGY,QACbC,EAAcb,EAAGa,YACjBC,EAAUd,EAAGc,QACbC,EAAgBf,EAAGe,cACnBC,EAAgBhB,EAAGgB,cACnBC,EAAiBjB,EAAGiB,eACpBC,EAAoBlB,EAAGkB,kBACvBC,EAAanB,EAAGmB,WAChBC,EAAkBpB,EAAGoB,gBACrBC,EAAerB,EAAGqB,aAClBC,EAA6BtB,EAAGsB,2BAChCC,EAAKvB,EAAGwB,QACRA,OAAiB,IAAPD,EAAgB,YAAcA,EACxCE,GAAO,QAAOzB,EAAI,CAAC,QAAS,iBAAkB,cAAe,SAAU,SAAU,aAAc,cAAe,QAAS,UAAW,cAAe,UAAW,gBAAiB,gBAAiB,iBAAkB,oBAAqB,aAAc,kBAAmB,eAAgB,6BAA8B,YAClT0B,GAAoB,OAAiB,SAASA,kBAC9CC,GAAY,OAAaF,GACzBG,GAAY,UACZC,EAAkBD,EAAYJ,EAAU,YACxCM,GAAmB,OAAY,SAC/BC,GAAWJ,aAA6C,EAASA,EAAUK,KAAOF,EAClFG,EAAgB1B,EAAS,GAAG2B,OAAOH,EAAS,gBAAaI,EACzDC,GAAK,QAAkB,SAAUpC,GAEjC,ODjDsB,SAAwBqC,EAAOC,GACnC,IAAlBA,EAAOxC,SACTwC,EAAS/C,GAEX,IAAIe,EAAc,EAgBlB,OAdmBgC,EAAOC,QAAQ/C,KAAI,SAAUC,GAC9C,MAAO,CACLG,SAAUH,EAAMG,UAAY,EAC5BC,MAAOJ,EAAMI,MAEjB,IAAG2C,MAAK,SAAUC,EAAGC,GACnB,OAAOA,EAAE9C,SAAW6C,EAAE7C,QACxB,IACa+C,MAAK,SAAUC,GAC1B,GAAIP,GAASO,EAAOhD,SAElB,OADAU,EAAcsC,EAAO/C,OACd,CAEX,IACOS,CACT,CC4BauC,CADK7C,EAAGqC,MACc/B,EAC/B,GAAG,CAACA,IACJwC,EAAUV,EAAG,GACbW,GAAaX,EAAG,GACdY,IAAY,IAAAC,QAAO,MACnBC,IAAY,OAAaH,GAAYC,GAAWtB,GAChDyB,IAAK,QAAa,CAClBhD,MAAOA,EACPW,QAASA,EACTC,cAAeA,EACfC,cAAeA,EACfC,eAAgBA,EAChBC,kBAAmBA,EACnBC,WAAYA,IAEdiC,GAAiBD,GAAGC,eACpBC,GAAwBF,GAAGE,sBAC3BC,GAAoBH,GAAGG,kBACrBC,GAAiBhD,GAAUC,GAAUC,GAAcC,EACnD8C,IAAY,IAAAP,QAAO,MACnBQ,IAAK,QAAgBT,GAAWQ,IAClCE,GAAeD,GAAGE,YAClBC,GAAeH,GAAGG,aACpBvC,GAAe,WAA6BA,EAC5C,IAcIwC,GAcJ,OAvBA,IAAAC,qBAAoB7D,GAAK,WACvB,MAAO,CACL0D,YAAa,WACPtC,GACFqC,IAEJ,EAEJ,GAAG,CAACrC,EAAcqC,KAEd9C,EACFiD,GAAS,gBAAoB,MAAO,CAClCE,UAAW,WACV,gBAAoB,IAAyB,CAC9CC,KAAM,WACL,gBAAoB,IAAY,CACjCC,SAAS,GACRpD,KACMF,IAAUR,EAAML,SACzB+D,GAAS,gBAAoB,MAAO,CAClCE,UAAW,SACVpD,IAEE,gBAAoB,OAAO,QAAS,CAAC,EAAGgB,EAAW,CACxDoC,WAAW,OAAKpC,EAAUoC,UAAW,QACrC9D,IAAKiD,KACH,gBAAoB,IAAmB,CACzC3C,OAAQgD,IAAkB,gBAAoB,MAAO,CACnDQ,WAAW,OAAK,SAAenC,GAAa,oBAA0B,EAAO,kBAAkBM,OAAOL,MACrG,gBAAoB,IAAa,CAClCtB,OAAQA,EACRC,OAAQA,EACRC,WAAYA,EACZC,YAAaA,KAEfwD,wBAAwB,EACxBC,sBAA2C,cAApBtC,EACvBL,QAA6B,cAApBK,EAAkC,QAAUA,EACrDuC,eAAgB/C,EAChBgD,eAAgB/C,EAChBgD,YAAad,GACbe,WAAYtC,EACZuC,aAAkC,cAApB3C,GACb,gBAAoB,MAAO,CAC5BkC,WAAW,OAAKR,IAAkB,kBACjCM,SAAuCA,GAAS,gBAAoBY,EAAW,CAChFtE,MAAOA,EACPC,eAAgBA,EAChBU,QAASA,EACTE,cAAeA,EACf8B,QAASA,EACTM,eAAgBA,GAChBC,sBAAuBA,GACvBjC,gBAAiBA,EACjBkC,kBAAmBA,GACnBoB,QA5DgB,SAAqBC,GACjCtD,GACFuC,GAAae,EAAMC,cAEvB,EAyDEC,gBAAiB5C,EACjB6C,eAAgB7C,MAEpB,IACA,IACIwC,EAAY,SAAmBzE,GACjC,IAAIG,EAAQH,EAAGG,MACbC,EAAiBJ,EAAGI,eACpBU,EAAUd,EAAGc,QACbE,EAAgBhB,EAAGgB,cACnB8B,EAAU9C,EAAG8C,QACbM,EAAiBpD,EAAGoD,eACpBC,EAAwBrD,EAAGqD,sBAC3BjC,EAAkBpB,EAAGoB,gBACrBkC,EAAoBtD,EAAGsD,kBACvBoB,EAAU1E,EAAG0E,QACbI,EAAiB9E,EAAG8E,eACpBD,EAAkB7E,EAAG6E,gBACnBE,IAAe/D,EACfd,GAAK,QAAac,EAAeb,EAAML,QACzCkF,EAAgB9E,EAAG8E,cACnBC,EAAc/E,EAAG+E,YACfC,EAA4B9E,EAAe+E,UAAY,GAC3DD,EAA4B9D,EAAkB8D,EAA0B1E,QAAO,SAAU4E,GACvF,OAAOA,EAAQpD,KAA+C,IAAzCZ,EAAgBiE,QAAQD,EAAQpD,GACvD,IAAKkD,EACL,IAAII,OAAWnD,EACXoD,OAAepD,EAKnB,OAJI4C,IACFO,EAAW,QACXC,EAAe,gBAEV,gBAAoB,MAAM,QAAS,CACxCxB,WAAW,OAAK,OAAa,EAAO,aAAa7B,OAAOY,GAAW,KACnE0C,KAAMF,EACN,kBAAmBR,EACnB,mBAAoBD,GACnB,MAAgB,WAAoB1E,EAAMX,KAAI,SAAUiG,EAAM/F,GAC/D,IAAIM,EACJ,OAAO,gBAAoB,MAAM,QAAS,CACxC+D,WAAW,OAAK,QAAc/D,EAAK,CAAC,EAAGA,EAAG,sBAA6B+E,EAAY/E,EAAG,oBAA2B+E,GAAc3B,EAAeqC,GAAOzF,IACrJ0F,KAAK,QAAW5E,EAAS2E,EAAM/F,GAC/BgF,QAASA,GACR,MAAgB,UAAmB,CACpCc,KAAMD,IACJ,gBAAoB,MAAO,CAC7BxB,UAAW,iBACV,gBAAoB,MAAO,CAC5BA,UAAW,kBACV,gBAAoB,OAAQ,CAC7BA,UAAW,wBACV3D,EAAeG,OAASH,EAAeG,OAAOkF,GAAQ,IAAKV,GAAc,gBAAoB,MAAO,CACrGhB,UAAW,wBACV,gBAAoB,KAAkB,QAAS,CAChD4B,YAAaX,EACbY,UAAWX,EACXY,cAAevC,GACdD,EAAsBoC,OAAWP,EAA0B1F,KAAI,SAAUQ,EAAIN,GAC9E,IAAIQ,EAAKF,EAAGqC,MACVA,OAAe,IAAPnC,EAAgB,IAAMA,EAC9BK,EAASP,EAAGO,OACZuF,EAAU9F,EAAG8F,QACb9D,EAAKhC,EAAGgC,GACV,OAAO,gBAAoB,MAAO,CAChC0D,IAAK1D,GAAMtC,EACXqE,UAAW,UACXgC,MAAO,CACL1D,MAAO,GAAGH,OAAOG,EAAO,OAEzB9B,EAAS,gBAAoB,MAAO,CACrCwD,UAAW,qBACVxD,GAAU,GAAIuF,EAAU,gBAAoB,MAAO,CACpD/B,UAAW,sBACV+B,EAAQL,IAAS,GACtB,KACF,IACF,GACA,OAAiB1F,EAAO,Q,2ECpNpBiG,EAAO,cAAiB,SAAUhG,EAAIC,GACxC,IAAIC,EAAKF,EAAGwB,QACVA,OAAiB,IAAPtB,EAAgB,YAAcA,EACxCG,EAAKL,EAAGiG,SACRA,OAAkB,IAAP5F,EAAgB,SAAWA,EACtCkB,EAAKvB,EAAGkG,MACRA,OAAe,IAAP3E,EAAgB,SAAWA,EACnCa,EAAKpC,EAAGmG,SACRA,OAAkB,IAAP/D,GAAwBA,EACnCgE,GAAQ,QAAOpG,EAAI,CAAC,UAAW,WAAY,QAAS,aAClDqG,GAAqB,OAAiB,QAC1C,OAAO,gBAAoB,KAAc,QAAS,CAChD7E,QAASA,EACTyE,SAAUA,EACVC,MAAOA,EACPC,SAAUA,GACTC,EAAOC,EAAoB,CAC5BpG,IAAKA,IAET,KACA,OAAiB+F,EAAM,QACvB,K,ypBCklByBM,IAAAA,EC/lBe,WD+lBfA,MC/lBe,mEAERC,SAAAA,EAgBhC,MAwBEC,SAAAA,GAAAA,IAAAA,EAGA,OAzBAA,SAAAA,GAAAA,IAAAA,EAAAA,EAAAA,OAAAA,QAAAA,MAGQA,GAAAA,OAAAA,EAAAA,EAAMC,SAAAA,OAAAA,EAANC,EAAcC,eAAAA,EAAdC,EAAwBC,IAAAA,CAHhCL,CAyBsBA,GAAAA,EAlBtBA,SAAAA,GAAAA,OACsCM,QAAAA,MAAQN,OAAAA,EAAAA,EAAMO,gBAAAA,CADpDP,CAsB4BA,GAAAA,EACdO,gBAlBdP,SAAAA,GAAAA,OACkCM,QAAAA,MAAQN,OAAAA,EAAAA,EAAMQ,YAAAA,CADhDR,CAqBwBA,GAAAA,EACVQ,YAAAA,MAAAA,GAAAA,OAAAA,EAEPR,EAAMS,sBAAAA,EAANC,EAAuBH,eAAAA,EAqI5BI,SAAAA,EAgBFC,EACAC,EACAZ,EACA7F,EACAmF,GA4BA,YA5BAA,IAAAA,IAAAA,EAAuB,CAAC,GAajBA,EAAAA,CAAAA,EAKFU,EAAAA,CACH7F,QAAAA,EACA0G,WAAYF,EACZ,kBAAkB,GAClBrB,MAAM,EAANA,CAAAA,EACKA,EAAAA,CACHwB,QAASF,EAAW,EAAI,iBAa5BG,EACAH,EACAzE,EACAP,EACAiE,EACAmB,EACAC,EACAC,GAEA,MAAoC,CAAC,EAEjCF,IACFG,EAAaH,gBAAkBA,EAAAA,UAE3B7E,GACFgF,EAAavF,MAAQA,EACrBuF,EAAatB,OAASA,EACtBsB,EAAaH,gBAAkBA,EAC/BG,EAAaC,SAAAA,aAAAA,gBACJjF,GAAAA,cAMAA,KALTgF,EAAaC,SAAAA,WACbD,EAAaE,IAAM,EACnBF,EAAaG,KAAO,EACpBH,EAAaI,OAAS,EACtBJ,EAAaK,MAAQ,IAUrBP,IACFE,EAAaF,UAAYA,GAGvBC,IACFC,EAAaD,eAAiBA,GAEhC,WACKH,EAAAA,CACH,eAAc,EACd,yBAAyB,GACzBzB,MAAM,EAANA,CACEwB,QAASF,EAAW,EAAI,EACxBa,WAAW,wBACRN,KAeP,OAJIvF,CAAAA,CAgF8C8F,IC5T7CC,ED4T6CD,EAAAA,CAAAA,YAAAA,EE9UE,SF8UFA,GE3UlD7B,IAFA1D,EAAAA,EADmEA,OAEnEP,EAAAA,EAFmEA,MAGnEiE,EAAAA,EAHmEA,OAKnE,oBAAI1D,EAAAA,EAAAA,cAAAA,MAAAA,CAAAA,eAAAA,EAEiBmD,MAAO,CAAEsC,WAAgB/B,EAASjE,EAAS,2BAI5DO,EAAAA,EAAAA,cAAAA,MAAAA,CAEKmD,MAAO,CAAEuC,SAAUjG,EAAOkG,QAAQ,UACrCC,EAAAA,cAAAA,MAAAA,CACEC,IAAI,GACJjD,KAAK,6BACO,OACZqB,IAAAA,mDAAwDP,EAAAA,YAAkBjE,EAAAA,kEAC1E0D,MAAO,CACLuC,SAAS,OACTC,QAAQ,QACRV,SAAS,aAATA,IAAAA,EAAAA,EAWV,SAAApF,GAAAA,IAAyBiG,EAAAA,EAAFA,SAAetC,EAAAA,EAAAA,EAAAA,GACpC,uBACGuC,EAAAA,SAAAA,KACCH,EAAAA,cAACI,EAAAA,EAAAA,CAAAA,EAAUxC,IACVsC,EAEmC,+FDtEC,SAAAG,GAAAA,IAC3ChC,EAIAS,EAL0DT,IAE1DiC,EAGAxB,EAL0DwB,OAG1DlI,EAEA0G,EAL0D1G,QAAAA,EAK1D0G,EAL0DmB,IAI1DA,OAAAA,IAAAA,EAAAA,GAAAA,EACAnB,EAAAA,EAL0DA,WAMvDlB,EAAAA,EAAAA,EAAAA,GAEH,kCAEQA,EAAAA,CACJ2C,SAAS,QACTnI,QAASA,EACTiG,IAAKS,EAAaT,OAAAA,EAAM1E,WACbmF,OAAAA,EAAaT,EACxBiC,OAAQxB,EAAawB,OAAAA,EAAS3G,cAChBmF,OAAAA,EAAawB,EAC3BL,IAAKA,IAAAA,EAAAA,EAKoC,SAAAI,GAAAA,IAC7ClC,EAEakC,EAHiDlC,SAAAA,EAGjDkC,EAHiDV,QAE9DA,OAAAA,IAAAA,EAAU,OACGU,EAHiDvB,WAG9DA,OAAAA,IAAAA,GAAa,EACVlB,EAAAA,EAAAA,EAAAA,GAEH,EAAcA,EAAM4C,QAAAA,MAASrC,OAAAA,EAAAA,EAAUqC,OAAAA,EAErCR,EAAAA,cAACS,EAAAA,EAAAA,CAAAA,EAAU7C,EAAWO,EAAAA,CAAUqC,MAAOA,EAAO1B,WAAYA,KAG5D,OAAKa,EAAQrI,OAAAA,EAAAA,cAAAA,UAAAA,KAMRqI,EAAQ3I,KAAI,gBAAG0J,EAAAA,EAAAA,MAAOJ,EAAAA,EAAAA,OAAQ9E,EAAAA,EAAAA,KAAAA,OAC7BwE,EAAAA,cAAAA,SAAAA,CACE9C,IAAQwD,EAAAA,IAASlF,EAAAA,IAAQ8E,EACzB9E,KAAMA,EACNkF,MAAOA,EACPJ,OAAQxB,EAAawB,OAAAA,EAAS3G,cAChBmF,OAAAA,EAAawB,EAC3BE,MAAOA,GAAAA,IAGVZ,GAAAA,CAAAA,EAKPa,EAAME,UAAY,CAChBtC,IAAKuC,EAAAA,OAAAA,WACLX,IAAKW,EAAAA,OAAAA,WACLJ,MAAOI,EAAAA,OACPN,OAAQM,EAAAA,OACR9B,WAAY8B,EAAAA,MAGdC,EAAQC,YAAAA,UACRD,EAAQF,UAAY,CAClBV,IAAKW,EAAAA,OAAAA,WACL9B,WAAY8B,EAAAA,KACZzC,SAAUyC,EAAAA,MAAgB,CACxBvC,IAAKuC,EAAAA,OAAAA,WACLN,OAAQM,EAAAA,OACRJ,MAAOI,EAAAA,SAETjB,QAASiB,EAAAA,QACPA,EAAAA,UAAoB,CAClBA,EAAAA,MAAgB,CACdF,MAAOE,EAAAA,OAAAA,WACPpF,KAAMoF,EAAAA,OACNJ,MAAOI,EAAAA,OACPN,OAAQM,EAAAA,OAAAA,aAEVA,EAAAA,MAAgB,CACdF,MAAOE,EAAAA,OACPpF,KAAMoF,EAAAA,OAAAA,WACNJ,MAAOI,EAAAA,OACPN,OAAQM,EAAAA,OAAAA,iBAA2BG,IAAAA,EAAAA,CAAAA,YAAAA,EE5GzC,SAAAV,GAAAA,IAAuBlC,EAAAA,EAAFA,SAAeP,EAAAA,EAAAA,EAAAA,GAClC,OAAIO,EAAAA,EAAAA,cAEC0C,EAAAA,EAAAA,CAAAA,EACKjD,EAAAA,CACJO,SAAU,CACRE,IAAKF,GAAAA,eAAAA,EAGP8B,IAAI,iCAIQrC,GAAAA,EAItBoD,EAAYF,YAAAA,cACZE,EAAYL,UAAY,CACtBxC,SAAUyC,EAAAA,OACVjB,QAAQ,OAARA,EAASkB,EAAQF,gBAAAA,EAARM,EAAmBtB,QAC5BM,IAAK,SAAUrC,EAAOsD,EAAUC,GAC9B,OAAKvD,EAAMsD,GAAAA,IAAAA,MAAAA,iBAKSA,EAAAA,kBAA4BC,EAAAA,yBAAAA,IAAAA,GChCvCC,IAAAA,EAAoC,SAAmBxD,GAClE,uCAEIoC,EAAAA,cAACa,EAAAA,EAAAA,CAAAA,EAAYjD,IACboC,EAAAA,cAAAA,WAAAA,KACEA,EAAAA,cAACa,EAAAA,EAAAA,CAAAA,EAAYjD,EAAAA,CAAOkB,YAAAA,MAAY,EAMxCsC,EAAUN,YAAAA,YACVM,EAAUT,UAAYE,EAAQF,UAAAA,ICY9B,IDZ8BA,EE2G2B,SACvD/C,EACAsD,EACAC,GAAAA,IAAAA,IAAAA,EAAAA,UAAAA,OACGlI,EAAAA,IAAAA,MAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GAAAA,EAAAA,EAAAA,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAAA,UAAAA,GAAAA,OAEE2E,EAAMqC,KAAAA,KAAOrC,EAAMqC,IAAAA,IAAAA,OAAAA,MAAAA,IAAAA,CAMArC,EAAOsD,EAAUC,GAAAA,OAAkBlI,IAAAA,IAAAA,MAAAA,iCAJtBkI,EAAAA,0JAAAA,EAAAA,EAOd,CACvBE,MAAOT,IAAAA,OAAAA,WACPX,IAAKqB,GAAAA,EAAAA,CAAAA,KAAAA,QAAAA,QAAAA,kBAAAA,YAAAA,QAAAA,cAAAA,SAAAA,WAAAA,EAAAA,CAAAA,QAAAA,aAAAA,EDjHY,IAAIC,IAkCvB,EAAkD,SAAAC,GAAAA,IAAAA,EAShDC,EAT6EC,GAC7EA,OAAAA,IAAAA,EAAAA,MAAAA,EACAL,EAOAI,EAT6EJ,MAG7E9D,EAMAkE,EAT6ElE,MAI7E0B,EAKAwC,EAT6ExC,gBAK7E1D,EAIAkG,EAT6ElG,UAMtEoG,EAGPF,EAHAG,MACAC,EAEAJ,EAT6EI,YAQ7EC,EACAL,EAT6EK,OAS7EL,EAAAA,EAT6EA,QAU1E7D,EAAAA,EAAAA,EAAAA,GAEK/D,EAA0BwH,EAA5BxH,MAASiE,EAAmBuD,EAA5BvD,OAAiB1D,EAAWiH,EAA5BjH,OAA4BiH,EAAAA,SLOlCxH,EACAiE,EACA1D,GAIA,MAAoC,CAAC,EAErC,yBAmBA,MAde2H,UAGX3H,GACFgF,EAAavF,MAAQA,EACrBuF,EAAatB,OAASA,GAAAA,gBACb1D,IAKTmB,EAAAA,yDAGK,CACLA,UAAAA,EACA,4BAA4B,GAC5BgC,MAAO6B,EAAAA,CKrCyBiC,CAKdxH,EAAOiE,EAAQ1D,GAH1B4H,EACIC,EADX1E,MACW0E,EAAAA,EAAX1G,UACG2G,EAAAA,EAAAA,EAAAA,GAAAA,GAEQzH,EAAAA,EAAAA,UAAAA,GACI0H,EAAAA,EAAAA,UAAQ,kBAAMC,KAAKC,UAAUhB,EAAMpD,OAAAA,GAAS,CAACoD,EAAMpD,SAGhE0D,IACFpG,EAAYoG,GAGd,eHxCAvH,EACAP,EACAiE,GAEA,SAWA,MAAM,cAVF1D,IACFkI,EAAAA,+CACGxE,EAASjE,EAAS,kCAInBO,IACFkI,EAAAA,0BAAkCzI,EAAAA,iIAAqIiE,EAAAA,YAAkBjE,EAAAA,yIAAAA,CAAAA,CG4B3L,CAAuBO,EAAQP,EAAOiE,GA+HtC,OA7HAyE,EAAAA,EAAAA,YAAU,WACHC,IACHA,EAA6BC,QAAAA,IAAAA,CAAAA,EAAAA,EAAAA,KAAAA,EAAAA,EAAAA,OAAAA,KAAAA,EAAAA,KAAAA,EAAAA,OAAyBC,MACpD,gBAAGC,EAAAA,EAAAA,oBAAqBC,EAAAA,EAAAA,qBAAAA,OACtBC,EAAcF,EAEP,CACLA,oBAAAA,EACAC,qBAAAA,EAAAA,KAQR,IA4CA,IA5CA,EAAiBE,EAAKC,QAAQC,cAAc,2BAG5C,OAAIC,GAAYC,KACVD,EAASE,UAAAA,MAEXtB,GAAAA,EAAc,CACZuB,WAAU,IAAC,MAEbtB,GAAAA,EAAS,CACPsB,WAAU,IAIZC,YAAW,WACTJ,EAASK,gBAAgB,wBAAhBA,GACR,WAEHzB,GAAAA,EAAc,CACZuB,WAAU,IAGZH,EAASM,iBAAiB,QAAQ,SAAS,IACzCN,EAASO,oBAAoB,OAAQC,GAAAA,MAErC3B,GAAAA,EAAS,CACPsB,WAAU,IAGZC,YAAW,WACTJ,EAASK,gBAAgB,wBAAhBA,GACR,YAIPI,EAAWC,IAAIC,IAKbf,GAAea,EAAWG,IAAID,QAAlC,GAMApB,EAA2BE,MACzB,YAAwBE,IAArBD,EAAAA,EAAAA,oBAAqBC,EAAAA,EAAAA,qBACjBE,EAAKC,UAIVD,EAAKC,QAAQe,UAAYnB,EAAAA,EAAAA,CACvB/D,WAAU,EACVC,SAAU6E,EAAWG,IAAID,GACzBvC,MAAAA,GACGzD,IAGA8F,EAAWG,IAAID,KAClBG,EAAiBC,uBAAsB,WACjClB,EAAKC,UACPkB,EAAkBrB,EAChBE,EAAKC,QACLa,EACAF,EACAnG,EACAsE,EACAC,EACAL,GAAAA,KAAAA,IASL,WACDsC,GACFG,qBAAqBH,GAEnBE,GACFA,GAAAA,EAAAA,GAGH,CAAC5C,KAGJ8C,EAAAA,EAAAA,kBAAgB,WACVT,EAAWG,IAAID,IAAaf,IAC9BC,EAAKC,QAAQe,UAAYjB,EAAAA,EAAAA,CACvBjE,UAAW8E,EAAWG,IAAID,GAC1B/E,SAAU6E,EAAWG,IAAID,GACzBvC,MAAAA,GACGzD,IAAAA,MAILiE,GAAAA,EAAc,CACZuB,WAAU,IAAC,MAEbtB,GAAAA,EAAS,CACPsB,WAAU,IAAC,GAGd,CAAC/B,KAAAA,EAAAA,EAAAA,eAGiBK,EAAAA,EAAAA,CAAAA,EAChBQ,EAAAA,CACH3E,MAAM,EAANA,CAAAA,EACKyE,EACAzE,EAAAA,CACH0B,gBAAAA,IAEF1D,UAAc0G,GAAS1G,EAAAA,IAAgBA,EAAAA,IACvC9D,IAAKqL,EACLsB,wBAAyB,CACvBC,OAAQ/B,GAEVgC,0BAAyB,IAAC,KAIkCC,EAAAA,EAAAA,OAC9D,SAAqB3G,GACnB,OAAKA,EAAMyD,OASDmD,EAAAA,EAAAA,eAKWC,EAAqB7G,GAZ9B4G,IAAAA,IAgBhBE,EAAY/D,UAAYA,EACxB+D,EAAY5D,YAAAA,cAAAA,IEtOV4D,EFsOU5D,EAAAA,CAAAA,MAAAA,cAAAA,UAAAA,QAAAA,SAAAA,cAAAA,mBAAAA,cAAAA,UAAAA,UAAAA,mBAAAA,aAAAA,aAAAA,cAAAA,cAAAA,iBAAAA,cAAAA,wBAAAA,EExL6C,SACvDlD,EACAsD,GAAAA,IAAAA,IAAAA,EAAAA,UAAAA,OACGjI,EAAAA,IAAAA,MAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GAAAA,EAAAA,EAAAA,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAAA,UAAAA,GAAAA,MAAAA,cAGD2E,EAAMxD,QAAAA,UACL8G,GAAAA,WAAwBA,IACzBtD,EAAMsD,GAAAA,IAAAA,OAAAA,MAAAA,IAAAA,CAMgBtD,EAAOsD,GAAAA,OAAajI,IAAAA,IAAAA,MAAAA,IAHpCiI,EAAAA,KAAatD,EAAMsD,GAAAA,+CAAAA,EAAAA,EAMR,IAAIK,IAAI,CAAC,QAAD,8BAEJ,CACvBlD,IAAKuC,IAAAA,OAAAA,WACLX,IAAKqB,EACLzH,MAAO8K,EACP7G,OAAQ6G,EACRnE,MAAOI,IAAAA,OACPxG,OAASwD,SAAAA,GACP,YAAIA,EAAMxD,SAGNwK,EAAaf,IAAIjG,EAAMxD,QAI3B,OAAO,IAAIyK,MAAM,iBACEjH,EAAMxD,OAAAA,qHAAAA,GAAAA,GAhF3BsK,ECLgBI,EDOT,SAAP,OACEzG,EAEA0G,EAH0B1G,IAEb2G,EACbD,EADAE,YACAF,EAAAA,EAH0BA,QAsBvBnH,EAAAA,EAAAA,EAAAA,GAMH,OAJImH,GACFG,QAAQV,KAAKO,GAGXC,EAAAA,EAAAA,cACMN,EAAAA,EAAAA,CAAYrD,MAAO2D,GAAepH,KAE5CsH,QAAQV,KAAK,mBAAoBnG,GAEvBmG,KAAAA,GCtCdW,EAAYrE,YAAAA,cACZqE,EAAYxE,UAAYA,C,mBClBxB,IA6BMyE,EAAY,SAACC,EAAOC,GACzB,GAAuB,iBAAVD,IAAsBE,MAAMC,QAAQH,GAChD,MAAM,IAAII,UAAU,gDAGrBH,EAAUI,OAAOC,OAAO,CACvBC,YAAY,GACVN,GAEH,IAAoBO,EAUpB,OAPCR,EADGE,MAAMC,QAAQH,GACTA,EAAMrO,KAAI,SAAA6O,GAAC,OAAIA,EAAEC,MAAM,IAC7B9N,QAAO,SAAA6N,GAAC,OAAIA,EAAEvO,MAAM,IACpByO,KAAK,KAECV,EAAMS,OAGM,IAAjBT,EAAM/N,OACF,GAGa,IAAjB+N,EAAM/N,OACFgO,EAAQM,WAAaP,EAAMW,cAAgBX,EAAMY,eAGpCZ,IAAUA,EAAMY,gBAGpCZ,EA3DwB,SAAAa,GAKzB,IAJA,IAAIC,GAAkB,EAClBC,GAAkB,EAClBC,GAAsB,EAEjBC,EAAI,EAAGA,EAAIJ,EAAO5O,OAAQgP,IAAK,CACvC,IAAMC,EAAYL,EAAOI,GAErBH,GAAmB,WAAWK,KAAKD,IAAcA,EAAUP,gBAAkBO,GAChFL,EAASA,EAAOnM,MAAM,EAAGuM,GAAK,IAAMJ,EAAOnM,MAAMuM,GACjDH,GAAkB,EAClBE,EAAsBD,EACtBA,GAAkB,EAClBE,KACUF,GAAmBC,GAAuB,WAAWG,KAAKD,IAAcA,EAAUN,gBAAkBM,GAC9GL,EAASA,EAAOnM,MAAM,EAAGuM,EAAI,GAAK,IAAMJ,EAAOnM,MAAMuM,EAAI,GACzDD,EAAsBD,EACtBA,GAAkB,EAClBD,GAAkB,IAElBA,EAAkBI,EAAUN,gBAAkBM,GAAaA,EAAUP,gBAAkBO,EACvFF,EAAsBD,EACtBA,EAAkBG,EAAUP,gBAAkBO,GAAaA,EAAUN,gBAAkBM,EAEzF,CAEA,OAAOL,CACR,CAgCUO,CAAkBpB,IAG3BA,EAAQA,EACNqB,QAAQ,YAAa,IACrBT,cACAS,QAAQ,mBAAmB,SAACC,EAAGC,GAAE,OAAKA,EAAGZ,aAAa,IACtDU,QAAQ,cAAc,SAAAG,GAAC,OAAIA,EAAEb,aAAa,IA5BxBH,EA8BDR,EA9BMC,EAAQM,WAAaC,EAAEiB,OAAO,GAAGd,cAAgBH,EAAE9L,MAAM,GAAK8L,EA+BxF,EAEAkB,EAAOC,QAAU5B,EAEjB2B,EAAOC,QAAPD,QAAyB3B,C","sources":["webpack://rileyflynn.me/./node_modules/@cloudscape-design/components/cards/styles.css.js","webpack://rileyflynn.me/./node_modules/@cloudscape-design/components/cards/cards-layout-helper.js","webpack://rileyflynn.me/./node_modules/@cloudscape-design/components/cards/index.js","webpack://rileyflynn.me/./node_modules/@cloudscape-design/components/link/index.js","webpack://rileyflynn.me/../src/image-utils.ts","webpack://rileyflynn.me/../src/components/hooks.ts","webpack://rileyflynn.me/../src/components/picture.tsx","webpack://rileyflynn.me/../src/components/layout-wrapper.tsx","webpack://rileyflynn.me/../src/components/placeholder.tsx","webpack://rileyflynn.me/../src/components/main-image.tsx","webpack://rileyflynn.me/../src/components/gatsby-image.browser.tsx","webpack://rileyflynn.me/../src/components/gatsby-image.server.tsx","webpack://rileyflynn.me/../src/components/static-image.server.tsx","webpack://rileyflynn.me/../src/components/static-image.tsx","webpack://rileyflynn.me/./node_modules/gatsby-plugin-image/node_modules/camelcase/index.js"],"sourcesContent":["import './styles.scoped.css';\nexport default {\n  \"card-inner\": \"awsui_card-inner_p8a6i_9tpvn_97\",\n  \"root\": \"awsui_root_p8a6i_9tpvn_117\",\n  \"header-variant-full-page\": \"awsui_header-variant-full-page_p8a6i_9tpvn_133\",\n  \"header-refresh\": \"awsui_header-refresh_p8a6i_9tpvn_133\",\n  \"list\": \"awsui_list_p8a6i_9tpvn_149\",\n  \"list-grid-1\": \"awsui_list-grid-1_p8a6i_9tpvn_157\",\n  \"card\": \"awsui_card_p8a6i_9tpvn_97\",\n  \"list-grid-2\": \"awsui_list-grid-2_p8a6i_9tpvn_160\",\n  \"list-grid-3\": \"awsui_list-grid-3_p8a6i_9tpvn_163\",\n  \"list-grid-4\": \"awsui_list-grid-4_p8a6i_9tpvn_166\",\n  \"list-grid-5\": \"awsui_list-grid-5_p8a6i_9tpvn_169\",\n  \"list-grid-6\": \"awsui_list-grid-6_p8a6i_9tpvn_172\",\n  \"list-grid-7\": \"awsui_list-grid-7_p8a6i_9tpvn_175\",\n  \"list-grid-8\": \"awsui_list-grid-8_p8a6i_9tpvn_178\",\n  \"list-grid-9\": \"awsui_list-grid-9_p8a6i_9tpvn_181\",\n  \"list-grid-10\": \"awsui_list-grid-10_p8a6i_9tpvn_184\",\n  \"list-grid-11\": \"awsui_list-grid-11_p8a6i_9tpvn_187\",\n  \"list-grid-12\": \"awsui_list-grid-12_p8a6i_9tpvn_190\",\n  \"list-grid-13\": \"awsui_list-grid-13_p8a6i_9tpvn_193\",\n  \"list-grid-14\": \"awsui_list-grid-14_p8a6i_9tpvn_196\",\n  \"list-grid-15\": \"awsui_list-grid-15_p8a6i_9tpvn_199\",\n  \"list-grid-16\": \"awsui_list-grid-16_p8a6i_9tpvn_202\",\n  \"list-grid-17\": \"awsui_list-grid-17_p8a6i_9tpvn_205\",\n  \"list-grid-18\": \"awsui_list-grid-18_p8a6i_9tpvn_208\",\n  \"list-grid-19\": \"awsui_list-grid-19_p8a6i_9tpvn_211\",\n  \"list-grid-20\": \"awsui_list-grid-20_p8a6i_9tpvn_214\",\n  \"selection-control\": \"awsui_selection-control_p8a6i_9tpvn_218\",\n  \"loading\": \"awsui_loading_p8a6i_9tpvn_227\",\n  \"empty\": \"awsui_empty_p8a6i_9tpvn_228\",\n  \"has-header\": \"awsui_has-header_p8a6i_9tpvn_235\",\n  \"card-header\": \"awsui_card-header_p8a6i_9tpvn_272\",\n  \"card-header-inner\": \"awsui_card-header-inner_p8a6i_9tpvn_278\",\n  \"card-selectable\": \"awsui_card-selectable_p8a6i_9tpvn_282\",\n  \"card-selected\": \"awsui_card-selected_p8a6i_9tpvn_285\",\n  \"section\": \"awsui_section_p8a6i_9tpvn_294\",\n  \"section-header\": \"awsui_section-header_p8a6i_9tpvn_300\",\n  \"section-content\": \"awsui_section-content_p8a6i_9tpvn_306\"\n};","var WIDTHS = [1920, 1400, 1200, 992, 768];\n// Transform the array of widths into a valid cardsPerRow property that is used as default\nvar defaultCardsPerRow = WIDTHS.map(function (value, index, widths) {\n  return {\n    minWidth: value,\n    cards: widths.length + 1 - index\n  };\n});\nexport var getCardsPerRow = function getCardsPerRow(width, config) {\n  if (config.length === 0) {\n    config = defaultCardsPerRow;\n  }\n  var cardsPerRow = 1;\n  // sort them by descending order of minWidth\n  var sortedConfig = config.slice().map(function (value) {\n    return {\n      minWidth: value.minWidth || 0,\n      cards: value.cards\n    };\n  }).sort(function (a, b) {\n    return b.minWidth - a.minWidth;\n  });\n  sortedConfig.some(function (layout) {\n    if (width >= layout.minWidth) {\n      cardsPerRow = layout.cards;\n      return true;\n    }\n  });\n  return cardsPerRow;\n};","import { __assign, __rest } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport clsx from 'clsx';\nimport React, { useImperativeHandle, useRef } from 'react';\nimport styles from './styles.css.js';\nimport { getCardsPerRow } from './cards-layout-helper';\nimport { getBaseProps } from '../internal/base-component';\nimport { useContainerQuery } from '../internal/hooks/container-queries/use-container-query';\nimport ToolsHeader from '../table/tools-header';\nimport { getItemKey } from '../table/utils';\nimport { focusMarkers, useFocusMove, useSelection } from '../table/use-selection';\nimport SelectionControl from '../table/selection-control';\nimport InternalContainer from '../container/internal';\nimport InternalStatusIndicator from '../status-indicator/internal';\nimport { applyDisplayName } from '../internal/utils/apply-display-name';\nimport stickyScrolling from '../table/sticky-scrolling';\nimport { useSupportsStickyHeader } from '../container/use-sticky-header';\nimport useBaseComponent from '../internal/hooks/use-base-component';\nimport { useVisualRefresh } from '../internal/hooks/use-visual-mode';\nimport { useMergeRefs } from '../internal/hooks/use-merge-refs';\nimport { useUniqueId } from '../internal/hooks/use-unique-id';\nimport LiveRegion from '../internal/components/live-region';\nvar Cards = React.forwardRef(function (_a, ref) {\n  var _b = _a.items,\n    items = _b === void 0 ? [] : _b,\n    cardDefinition = _a.cardDefinition,\n    _c = _a.cardsPerRow,\n    cardsPerRow = _c === void 0 ? [] : _c,\n    header = _a.header,\n    filter = _a.filter,\n    pagination = _a.pagination,\n    preferences = _a.preferences,\n    empty = _a.empty,\n    loading = _a.loading,\n    loadingText = _a.loadingText,\n    trackBy = _a.trackBy,\n    selectedItems = _a.selectedItems,\n    selectionType = _a.selectionType,\n    isItemDisabled = _a.isItemDisabled,\n    onSelectionChange = _a.onSelectionChange,\n    ariaLabels = _a.ariaLabels,\n    visibleSections = _a.visibleSections,\n    stickyHeader = _a.stickyHeader,\n    stickyHeaderVerticalOffset = _a.stickyHeaderVerticalOffset,\n    _d = _a.variant,\n    variant = _d === void 0 ? 'container' : _d,\n    rest = __rest(_a, [\"items\", \"cardDefinition\", \"cardsPerRow\", \"header\", \"filter\", \"pagination\", \"preferences\", \"empty\", \"loading\", \"loadingText\", \"trackBy\", \"selectedItems\", \"selectionType\", \"isItemDisabled\", \"onSelectionChange\", \"ariaLabels\", \"visibleSections\", \"stickyHeader\", \"stickyHeaderVerticalOffset\", \"variant\"]);\n  var __internalRootRef = useBaseComponent('Cards').__internalRootRef;\n  var baseProps = getBaseProps(rest);\n  var isRefresh = useVisualRefresh();\n  var computedVariant = isRefresh ? variant : 'container';\n  var instanceUniqueId = useUniqueId('cards');\n  var cardsId = (baseProps === null || baseProps === void 0 ? void 0 : baseProps.id) || instanceUniqueId;\n  var cardsHeaderId = header ? \"\".concat(cardsId, \"-header\") : undefined;\n  var _e = useContainerQuery(function (_a) {\n      var width = _a.width;\n      return getCardsPerRow(width, cardsPerRow);\n    }, [cardsPerRow]),\n    columns = _e[0],\n    measureRef = _e[1];\n  var refObject = useRef(null);\n  var mergedRef = useMergeRefs(measureRef, refObject, __internalRootRef);\n  var _f = useSelection({\n      items: items,\n      trackBy: trackBy,\n      selectedItems: selectedItems,\n      selectionType: selectionType,\n      isItemDisabled: isItemDisabled,\n      onSelectionChange: onSelectionChange,\n      ariaLabels: ariaLabels\n    }),\n    isItemSelected = _f.isItemSelected,\n    getItemSelectionProps = _f.getItemSelectionProps,\n    updateShiftToggle = _f.updateShiftToggle;\n  var hasToolsHeader = header || filter || pagination || preferences;\n  var headerRef = useRef(null);\n  var _g = stickyScrolling(refObject, headerRef),\n    _scrollToTop = _g.scrollToTop,\n    scrollToItem = _g.scrollToItem;\n  stickyHeader = useSupportsStickyHeader() && stickyHeader;\n  var onCardFocus = function onCardFocus(event) {\n    if (stickyHeader) {\n      scrollToItem(event.currentTarget);\n    }\n  };\n  useImperativeHandle(ref, function () {\n    return {\n      scrollToTop: function scrollToTop() {\n        if (stickyHeader) {\n          _scrollToTop();\n        }\n      }\n    };\n  }, [stickyHeader, _scrollToTop]);\n  var status;\n  if (loading) {\n    status = React.createElement(\"div\", {\n      className: styles.loading\n    }, React.createElement(InternalStatusIndicator, {\n      type: \"loading\"\n    }, React.createElement(LiveRegion, {\n      visible: true\n    }, loadingText)));\n  } else if (empty && !items.length) {\n    status = React.createElement(\"div\", {\n      className: styles.empty\n    }, empty);\n  }\n  return React.createElement(\"div\", __assign({}, baseProps, {\n    className: clsx(baseProps.className, styles.root),\n    ref: mergedRef\n  }), React.createElement(InternalContainer, {\n    header: hasToolsHeader && React.createElement(\"div\", {\n      className: clsx(styles.header, isRefresh && styles['header-refresh'], styles[\"header-variant-\".concat(computedVariant)])\n    }, React.createElement(ToolsHeader, {\n      header: header,\n      filter: filter,\n      pagination: pagination,\n      preferences: preferences\n    })),\n    disableContentPaddings: true,\n    disableHeaderPaddings: computedVariant === 'full-page',\n    variant: computedVariant === 'container' ? 'cards' : computedVariant,\n    __stickyHeader: stickyHeader,\n    __stickyOffset: stickyHeaderVerticalOffset,\n    __headerRef: headerRef,\n    __headerId: cardsHeaderId,\n    __darkHeader: computedVariant === 'full-page'\n  }, React.createElement(\"div\", {\n    className: clsx(hasToolsHeader && styles['has-header'])\n  }, status !== null && status !== void 0 ? status : React.createElement(CardsList, {\n    items: items,\n    cardDefinition: cardDefinition,\n    trackBy: trackBy,\n    selectionType: selectionType,\n    columns: columns,\n    isItemSelected: isItemSelected,\n    getItemSelectionProps: getItemSelectionProps,\n    visibleSections: visibleSections,\n    updateShiftToggle: updateShiftToggle,\n    onFocus: onCardFocus,\n    ariaDescribedby: cardsHeaderId,\n    ariaLabelledby: cardsHeaderId\n  }))));\n});\nexport default Cards;\nvar CardsList = function CardsList(_a) {\n  var items = _a.items,\n    cardDefinition = _a.cardDefinition,\n    trackBy = _a.trackBy,\n    selectionType = _a.selectionType,\n    columns = _a.columns,\n    isItemSelected = _a.isItemSelected,\n    getItemSelectionProps = _a.getItemSelectionProps,\n    visibleSections = _a.visibleSections,\n    updateShiftToggle = _a.updateShiftToggle,\n    onFocus = _a.onFocus,\n    ariaLabelledby = _a.ariaLabelledby,\n    ariaDescribedby = _a.ariaDescribedby;\n  var selectable = !!selectionType;\n  var _b = useFocusMove(selectionType, items.length),\n    moveFocusDown = _b.moveFocusDown,\n    moveFocusUp = _b.moveFocusUp;\n  var visibleSectionsDefinition = cardDefinition.sections || [];\n  visibleSectionsDefinition = visibleSections ? visibleSectionsDefinition.filter(function (section) {\n    return section.id && visibleSections.indexOf(section.id) !== -1;\n  }) : visibleSectionsDefinition;\n  var listRole = undefined;\n  var listItemRole = undefined;\n  if (selectable) {\n    listRole = 'group';\n    listItemRole = 'presentation';\n  }\n  return React.createElement(\"ol\", __assign({\n    className: clsx(styles.list, styles[\"list-grid-\".concat(columns || 1)]),\n    role: listRole,\n    \"aria-labelledby\": ariaLabelledby,\n    \"aria-describedby\": ariaDescribedby\n  }, focusMarkers && focusMarkers.root), items.map(function (item, index) {\n    var _a;\n    return React.createElement(\"li\", __assign({\n      className: clsx(styles.card, (_a = {}, _a[styles['card-selectable']] = selectable, _a[styles['card-selected']] = selectable && isItemSelected(item), _a)),\n      key: getItemKey(trackBy, item, index),\n      onFocus: onFocus\n    }, focusMarkers && focusMarkers.item, {\n      role: listItemRole\n    }), React.createElement(\"div\", {\n      className: styles['card-inner']\n    }, React.createElement(\"div\", {\n      className: styles['card-header']\n    }, React.createElement(\"span\", {\n      className: styles['card-header-inner']\n    }, cardDefinition.header ? cardDefinition.header(item) : ''), selectable && React.createElement(\"div\", {\n      className: styles['selection-control']\n    }, React.createElement(SelectionControl, __assign({\n      onFocusDown: moveFocusDown,\n      onFocusUp: moveFocusUp,\n      onShiftToggle: updateShiftToggle\n    }, getItemSelectionProps(item))))), visibleSectionsDefinition.map(function (_a, index) {\n      var _b = _a.width,\n        width = _b === void 0 ? 100 : _b,\n        header = _a.header,\n        content = _a.content,\n        id = _a.id;\n      return React.createElement(\"div\", {\n        key: id || index,\n        className: styles.section,\n        style: {\n          width: \"\".concat(width, \"%\")\n        }\n      }, header ? React.createElement(\"div\", {\n        className: styles['section-header']\n      }, header) : '', content ? React.createElement(\"div\", {\n        className: styles['section-content']\n      }, content(item)) : '');\n    })));\n  }));\n};\napplyDisplayName(Cards, 'Cards');","import { __assign, __rest } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport useBaseComponent from '../internal/hooks/use-base-component';\nimport { applyDisplayName } from '../internal/utils/apply-display-name';\nimport InternalLink from './internal';\nvar Link = React.forwardRef(function (_a, ref) {\n  var _b = _a.variant,\n    variant = _b === void 0 ? 'secondary' : _b,\n    _c = _a.fontSize,\n    fontSize = _c === void 0 ? 'body-m' : _c,\n    _d = _a.color,\n    color = _d === void 0 ? 'normal' : _d,\n    _e = _a.external,\n    external = _e === void 0 ? false : _e,\n    props = __rest(_a, [\"variant\", \"fontSize\", \"color\", \"external\"]);\n  var baseComponentProps = useBaseComponent('Link');\n  return React.createElement(InternalLink, __assign({\n    variant: variant,\n    fontSize: fontSize,\n    color: color,\n    external: external\n  }, props, baseComponentProps, {\n    ref: ref\n  }));\n});\napplyDisplayName(Link, 'Link');\nexport default Link;","import camelCase from \"camelcase\"\nimport type { IGatsbyImageData } from \"./index\"\n\nconst DEFAULT_PIXEL_DENSITIES = [0.25, 0.5, 1, 2]\nexport const DEFAULT_BREAKPOINTS = [750, 1080, 1366, 1920]\nexport const EVERY_BREAKPOINT = [\n  320, 654, 768, 1024, 1366, 1600, 1920, 2048, 2560, 3440, 3840, 4096,\n]\nconst DEFAULT_FLUID_WIDTH = 800\nconst DEFAULT_FIXED_WIDTH = 800\nconst DEFAULT_ASPECT_RATIO = 4 / 3\n\nexport type Fit = \"cover\" | \"fill\" | \"inside\" | \"outside\" | \"contain\"\n\nexport type Layout = \"fixed\" | \"fullWidth\" | \"constrained\"\nexport type ImageFormat = \"jpg\" | \"png\" | \"webp\" | \"avif\" | \"auto\" | \"\"\n\n/**\n * The minimal required reporter, as we don't want to import it from gatsby-cli\n */\nexport interface IReporter {\n  warn(message: string): void\n}\n\nexport interface ISharpGatsbyImageArgs {\n  layout?: Layout\n  formats?: Array<ImageFormat>\n  placeholder?: \"tracedSVG\" | \"dominantColor\" | \"blurred\" | \"none\"\n  tracedSVGOptions?: Record<string, unknown>\n  width?: number\n  height?: number\n  aspectRatio?: number\n  sizes?: string\n  quality?: number\n  transformOptions?: {\n    fit?: Fit\n    cropFocus?: number | string\n    duotone?: {\n      highlight: string\n      shadow: string\n      opacity?: number\n    }\n    grayscale?: boolean\n    rotate?: number\n    trim?: number\n  }\n  jpgOptions?: Record<string, unknown>\n  pngOptions?: Record<string, unknown>\n  webpOptions?: Record<string, unknown>\n  avifOptions?: Record<string, unknown>\n  blurredOptions?: { width?: number; toFormat?: ImageFormat }\n  breakpoints?: Array<number>\n  outputPixelDensities?: Array<number>\n  backgroundColor?: string\n}\n\nexport interface IImageSizeArgs {\n  width?: number\n  height?: number\n  layout?: Layout\n  filename: string\n  outputPixelDensities?: Array<number>\n  breakpoints?: Array<number>\n  fit?: Fit\n  reporter?: IReporter\n  sourceMetadata: { width: number; height: number }\n}\n\nexport interface IImageSizes {\n  sizes: Array<number>\n  presentationWidth: number\n  presentationHeight: number\n  aspectRatio: number\n  unscaledWidth: number\n}\n\nexport interface IImage {\n  src: string\n  width: number\n  height: number\n  format: ImageFormat\n}\n\nexport interface IGatsbyImageHelperArgs {\n  pluginName: string\n  generateImageSource: (\n    filename: string,\n    width: number,\n    height: number,\n    format: ImageFormat,\n    fit?: Fit,\n    options?: Record<string, unknown>\n  ) => IImage\n  layout?: Layout\n  formats?: Array<ImageFormat>\n  filename: string\n  placeholderURL?: string\n  width?: number\n  height?: number\n  sizes?: string\n  reporter?: IReporter\n  sourceMetadata?: { width: number; height: number; format: ImageFormat }\n  fit?: Fit\n  options?: Record<string, unknown>\n  breakpoints?: Array<number>\n  backgroundColor?: string\n  aspectRatio?: number\n}\n\nconst warn = (message: string): void => console.warn(message)\n\nconst sortNumeric = (a: number, b: number): number => a - b\n\nexport const getSizes = (width: number, layout: Layout): string | undefined => {\n  switch (layout) {\n    // If screen is wider than the max size, image width is the max size,\n    // otherwise it's the width of the screen\n    case `constrained`:\n      return `(min-width: ${width}px) ${width}px, 100vw`\n\n    // Image is always the same width, whatever the size of the screen\n    case `fixed`:\n      return `${width}px`\n\n    // Image is always the width of the screen\n    case `fullWidth`:\n      return `100vw`\n\n    default:\n      return undefined\n  }\n}\n\nexport const getSrcSet = (images: Array<IImage>): string =>\n  images.map(image => `${image.src} ${image.width}w`).join(`,\\n`)\n\nexport function formatFromFilename(filename: string): ImageFormat | undefined {\n  const dot = filename.lastIndexOf(`.`)\n  if (dot !== -1) {\n    const ext = filename.slice(dot + 1)\n    if (ext === `jpeg`) {\n      return `jpg`\n    }\n    if (ext.length === 3 || ext.length === 4) {\n      return ext as ImageFormat\n    }\n  }\n  return undefined\n}\n\nexport function setDefaultDimensions(\n  args: IGatsbyImageHelperArgs\n): IGatsbyImageHelperArgs {\n  let {\n    layout = `constrained`,\n    width,\n    height,\n    sourceMetadata,\n    breakpoints,\n    aspectRatio,\n    formats = [`auto`, `webp`],\n  } = args\n  formats = formats.map(format => format.toLowerCase() as ImageFormat)\n  layout = camelCase(layout) as Layout\n\n  if (width && height) {\n    return { ...args, formats, layout, aspectRatio: width / height }\n  }\n  if (sourceMetadata.width && sourceMetadata.height && !aspectRatio) {\n    aspectRatio = sourceMetadata.width / sourceMetadata.height\n  }\n\n  if (layout === `fullWidth`) {\n    width = width || sourceMetadata.width || breakpoints[breakpoints.length - 1]\n    height = height || Math.round(width / (aspectRatio || DEFAULT_ASPECT_RATIO))\n  } else {\n    if (!width) {\n      if (height && aspectRatio) {\n        width = height * aspectRatio\n      } else if (sourceMetadata.width) {\n        width = sourceMetadata.width\n      } else if (height) {\n        width = Math.round(height / DEFAULT_ASPECT_RATIO)\n      } else {\n        width = DEFAULT_FIXED_WIDTH\n      }\n    }\n\n    if (aspectRatio && !height) {\n      height = Math.round(width / aspectRatio)\n    } else if (!aspectRatio) {\n      aspectRatio = width / height\n    }\n  }\n  return { ...args, width, height, aspectRatio, layout, formats }\n}\n\n/**\n * Use this for getting an image for the blurred placeholder. This ensures the\n * aspect ratio and crop match the main image\n */\nexport function getLowResolutionImageURL(\n  args: IGatsbyImageHelperArgs,\n  width = 20\n): string {\n  args = setDefaultDimensions(args)\n  const { generateImageSource, filename, aspectRatio } = args\n  return generateImageSource(\n    filename,\n    width,\n    Math.round(width / aspectRatio),\n    args.sourceMetadata.format || `jpg`,\n    args.fit,\n    args.options\n  )?.src\n}\n\nexport function generateImageData(\n  args: IGatsbyImageHelperArgs\n): IGatsbyImageData {\n  args = setDefaultDimensions(args)\n\n  let {\n    pluginName,\n    sourceMetadata,\n    generateImageSource,\n    layout,\n    fit,\n    options,\n    width,\n    height,\n    filename,\n    reporter = { warn },\n    backgroundColor,\n    placeholderURL,\n  } = args\n\n  if (!pluginName) {\n    reporter.warn(\n      `[gatsby-plugin-image] \"generateImageData\" was not passed a plugin name`\n    )\n  }\n\n  if (typeof generateImageSource !== `function`) {\n    throw new Error(`generateImageSource must be a function`)\n  }\n\n  if (!sourceMetadata || (!sourceMetadata.width && !sourceMetadata.height)) {\n    // No metadata means we let the CDN handle max size etc, aspect ratio etc\n    sourceMetadata = {\n      width,\n      height,\n      format: sourceMetadata?.format || formatFromFilename(filename) || `auto`,\n    }\n  } else if (!sourceMetadata.format) {\n    sourceMetadata.format = formatFromFilename(filename)\n  }\n\n  const formats = new Set<ImageFormat>(args.formats)\n\n  if (formats.size === 0 || formats.has(`auto`) || formats.has(``)) {\n    formats.delete(`auto`)\n    formats.delete(``)\n    formats.add(sourceMetadata.format)\n  }\n\n  if (formats.has(`jpg`) && formats.has(`png`)) {\n    reporter.warn(\n      `[${pluginName}] Specifying both 'jpg' and 'png' formats is not supported. Using 'auto' instead`\n    )\n    if (sourceMetadata.format === `jpg`) {\n      formats.delete(`png`)\n    } else {\n      formats.delete(`jpg`)\n    }\n  }\n\n  const imageSizes = calculateImageSizes({ ...args, sourceMetadata })\n\n  const result: IGatsbyImageData[\"images\"] = {\n    sources: [],\n  }\n\n  let sizes = args.sizes\n  if (!sizes) {\n    sizes = getSizes(imageSizes.presentationWidth, layout)\n  }\n\n  formats.forEach(format => {\n    const images = imageSizes.sizes\n      .map(size => {\n        const imageSrc = generateImageSource(\n          filename,\n          size,\n          Math.round(size / imageSizes.aspectRatio),\n          format,\n          fit,\n          options\n        )\n        if (\n          !imageSrc?.width ||\n          !imageSrc.height ||\n          !imageSrc.src ||\n          !imageSrc.format\n        ) {\n          reporter.warn(\n            `[${pluginName}] The resolver for image ${filename} returned an invalid value.`\n          )\n          return undefined\n        }\n        return imageSrc\n      })\n      .filter(Boolean)\n\n    if (format === `jpg` || format === `png` || format === `auto`) {\n      const unscaled =\n        images.find(img => img.width === imageSizes.unscaledWidth) || images[0]\n\n      if (unscaled) {\n        result.fallback = {\n          src: unscaled.src,\n          srcSet: getSrcSet(images),\n          sizes,\n        }\n      }\n    } else {\n      result.sources?.push({\n        srcSet: getSrcSet(images),\n        sizes,\n        type: `image/${format}`,\n      })\n    }\n  })\n\n  const imageProps: Partial<IGatsbyImageData> = {\n    images: result,\n    layout,\n    backgroundColor,\n  }\n\n  if (placeholderURL) {\n    imageProps.placeholder = { fallback: placeholderURL }\n  }\n\n  switch (layout) {\n    case `fixed`:\n      imageProps.width = imageSizes.presentationWidth\n      imageProps.height = imageSizes.presentationHeight\n      break\n\n    case `fullWidth`:\n      imageProps.width = 1\n      imageProps.height = 1 / imageSizes.aspectRatio\n      break\n\n    case `constrained`:\n      imageProps.width = args.width || imageSizes.presentationWidth || 1\n      imageProps.height = (imageProps.width || 1) / imageSizes.aspectRatio\n  }\n\n  return imageProps as IGatsbyImageData\n}\n\nconst dedupeAndSortDensities = (values: Array<number>): Array<number> =>\n  Array.from(new Set([1, ...values])).sort(sortNumeric)\n\nexport function calculateImageSizes(args: IImageSizeArgs): IImageSizes {\n  const {\n    width,\n    height,\n    filename,\n    layout = `constrained`,\n    sourceMetadata: imgDimensions,\n    reporter = { warn },\n    breakpoints = DEFAULT_BREAKPOINTS,\n  } = args\n\n  // check that all dimensions provided are positive\n  const userDimensions = { width, height }\n  const erroneousUserDimensions = Object.entries(userDimensions).filter(\n    ([_, size]) => typeof size === `number` && size < 1\n  )\n  if (erroneousUserDimensions.length) {\n    throw new Error(\n      `Specified dimensions for images must be positive numbers (> 0). Problem dimensions you have are ${erroneousUserDimensions\n        .map(dim => dim.join(`: `))\n        .join(`, `)}`\n    )\n  }\n\n  if (layout === `fixed`) {\n    return fixedImageSizes(args)\n  } else if (layout === `constrained`) {\n    return responsiveImageSizes(args)\n  } else if (layout === `fullWidth`) {\n    return responsiveImageSizes({ breakpoints, ...args })\n  } else {\n    reporter.warn(\n      `No valid layout was provided for the image at ${filename}. Valid image layouts are fixed, fullWidth, and constrained. Found ${layout}`\n    )\n    return {\n      sizes: [imgDimensions.width],\n      presentationWidth: imgDimensions.width,\n      presentationHeight: imgDimensions.height,\n      aspectRatio: imgDimensions.width / imgDimensions.height,\n      unscaledWidth: imgDimensions.width,\n    }\n  }\n}\nexport function fixedImageSizes({\n  filename,\n  sourceMetadata: imgDimensions,\n  width,\n  height,\n  fit = `cover`,\n  outputPixelDensities = DEFAULT_PIXEL_DENSITIES,\n  reporter = { warn },\n}: IImageSizeArgs): IImageSizes {\n  let aspectRatio = imgDimensions.width / imgDimensions.height\n  // Sort, dedupe and ensure there's a 1\n  const densities = dedupeAndSortDensities(outputPixelDensities)\n\n  // If both are provided then we need to check the fit\n  if (width && height) {\n    const calculated = getDimensionsAndAspectRatio(imgDimensions, {\n      width,\n      height,\n      fit,\n    })\n    width = calculated.width\n    height = calculated.height\n    aspectRatio = calculated.aspectRatio\n  }\n\n  if (!width) {\n    if (!height) {\n      width = DEFAULT_FIXED_WIDTH\n    } else {\n      width = Math.round(height * aspectRatio)\n    }\n  } else if (!height) {\n    height = Math.round(width / aspectRatio)\n  }\n\n  const originalWidth = width // will use this for presentationWidth, don't want to lose it\n  const isTopSizeOverriden =\n    imgDimensions.width < width || imgDimensions.height < (height as number)\n\n  // If the image is smaller than requested, warn the user that it's being processed as such\n  // print out this message with the necessary information before we overwrite it for sizing\n  if (isTopSizeOverriden) {\n    const fixedDimension = imgDimensions.width < width ? `width` : `height`\n    reporter.warn(`\nThe requested ${fixedDimension} \"${\n      fixedDimension === `width` ? width : height\n    }px\" for the image ${filename} was larger than the actual image ${fixedDimension} of ${\n      imgDimensions[fixedDimension]\n    }px. If possible, replace the current image with a larger one.`)\n\n    if (fixedDimension === `width`) {\n      width = imgDimensions.width\n      height = Math.round(width / aspectRatio)\n    } else {\n      height = imgDimensions.height\n      width = height * aspectRatio\n    }\n  }\n\n  const sizes = densities\n    .filter(size => size >= 1) // remove smaller densities because fixed images don't need them\n    .map(density => Math.round(density * (width as number)))\n    .filter(size => size <= imgDimensions.width)\n\n  return {\n    sizes,\n    aspectRatio,\n    presentationWidth: originalWidth,\n    presentationHeight: Math.round(originalWidth / aspectRatio),\n    unscaledWidth: width,\n  }\n}\n\nexport function responsiveImageSizes({\n  sourceMetadata: imgDimensions,\n  width,\n  height,\n  fit = `cover`,\n  outputPixelDensities = DEFAULT_PIXEL_DENSITIES,\n  breakpoints,\n  layout,\n}: IImageSizeArgs): IImageSizes {\n  let sizes\n  let aspectRatio = imgDimensions.width / imgDimensions.height\n  // Sort, dedupe and ensure there's a 1\n  const densities = dedupeAndSortDensities(outputPixelDensities)\n\n  // If both are provided then we need to check the fit\n  if (width && height) {\n    const calculated = getDimensionsAndAspectRatio(imgDimensions, {\n      width,\n      height,\n      fit,\n    })\n    width = calculated.width\n    height = calculated.height\n    aspectRatio = calculated.aspectRatio\n  }\n\n  // Case 1: width of height were passed in, make sure it isn't larger than the actual image\n  width = width && Math.min(width, imgDimensions.width)\n  height = height && Math.min(height, imgDimensions.height)\n\n  // Case 2: neither width or height were passed in, use default size\n  if (!width && !height) {\n    width = Math.min(DEFAULT_FLUID_WIDTH, imgDimensions.width)\n    height = width / aspectRatio\n  }\n\n  // if it still hasn't been found, calculate width from the derived height.\n  // TS isn't smart enough to realise the type for height has been narrowed here\n  if (!width) {\n    width = (height as number) * aspectRatio\n  }\n\n  const originalWidth = width\n  const isTopSizeOverriden =\n    imgDimensions.width < width || imgDimensions.height < (height as number)\n  if (isTopSizeOverriden) {\n    width = imgDimensions.width\n    height = imgDimensions.height\n  }\n\n  width = Math.round(width)\n\n  if (breakpoints?.length > 0) {\n    sizes = breakpoints.filter(size => size <= imgDimensions.width)\n\n    // If a larger breakpoint has been filtered-out, add the actual image width instead\n    if (\n      sizes.length < breakpoints.length &&\n      !sizes.includes(imgDimensions.width)\n    ) {\n      sizes.push(imgDimensions.width)\n    }\n  } else {\n    sizes = densities.map(density => Math.round(density * (width as number)))\n    sizes = sizes.filter(size => size <= imgDimensions.width)\n  }\n\n  // ensure that the size passed in is included in the final output\n  if (layout === `constrained` && !sizes.includes(width)) {\n    sizes.push(width)\n  }\n  sizes = sizes.sort(sortNumeric)\n  return {\n    sizes,\n    aspectRatio,\n    presentationWidth: originalWidth,\n    presentationHeight: Math.round(originalWidth / aspectRatio),\n    unscaledWidth: width,\n  }\n}\n\nexport function getDimensionsAndAspectRatio(\n  dimensions,\n  options\n): { width: number; height: number; aspectRatio: number } {\n  // Calculate the eventual width/height of the image.\n  const imageAspectRatio = dimensions.width / dimensions.height\n\n  let width = options.width\n  let height = options.height\n\n  switch (options.fit) {\n    case `fill`: {\n      width = options.width ? options.width : dimensions.width\n      height = options.height ? options.height : dimensions.height\n      break\n    }\n    case `inside`: {\n      const widthOption = options.width\n        ? options.width\n        : Number.MAX_SAFE_INTEGER\n      const heightOption = options.height\n        ? options.height\n        : Number.MAX_SAFE_INTEGER\n\n      width = Math.min(widthOption, Math.round(heightOption * imageAspectRatio))\n      height = Math.min(\n        heightOption,\n        Math.round(widthOption / imageAspectRatio)\n      )\n      break\n    }\n    case `outside`: {\n      const widthOption = options.width ? options.width : 0\n      const heightOption = options.height ? options.height : 0\n\n      width = Math.max(widthOption, Math.round(heightOption * imageAspectRatio))\n      height = Math.max(\n        heightOption,\n        Math.round(widthOption / imageAspectRatio)\n      )\n      break\n    }\n\n    default: {\n      if (options.width && !options.height) {\n        width = options.width\n        height = Math.round(options.width / imageAspectRatio)\n      }\n\n      if (options.height && !options.width) {\n        width = Math.round(options.height * imageAspectRatio)\n        height = options.height\n      }\n    }\n  }\n\n  return {\n    width,\n    height,\n    aspectRatio: width / height,\n  }\n}\n","/* global GATSBY___IMAGE */\nimport { generateImageData, EVERY_BREAKPOINT } from \"../image-utils\"\nimport type { CSSProperties, HTMLAttributes, ImgHTMLAttributes } from \"react\"\nimport type { Node } from \"gatsby\"\nimport type { PlaceholderProps } from \"./placeholder\"\nimport type { MainImageProps } from \"./main-image\"\nimport type { IGatsbyImageData } from \"./gatsby-image.browser\"\nimport type {\n  IGatsbyImageHelperArgs,\n  Layout,\n  IImage,\n  ImageFormat,\n} from \"../image-utils\"\n\n// Native lazy-loading support: https://addyosmani.com/blog/lazy-loading/\nexport const hasNativeLazyLoadSupport = (): boolean =>\n  typeof HTMLImageElement !== `undefined` &&\n  `loading` in HTMLImageElement.prototype\n\nexport function gatsbyImageIsInstalled(): boolean {\n  return typeof GATSBY___IMAGE !== `undefined` && GATSBY___IMAGE\n}\n\nexport type IGatsbyImageDataParent<T = never> = T & {\n  gatsbyImageData: IGatsbyImageData\n}\nexport type IGatsbyImageParent<T = never> = T & {\n  gatsbyImage: IGatsbyImageData\n}\nexport type FileNode = Partial<Node> & {\n  childImageSharp?: IGatsbyImageDataParent<Partial<Node>>\n}\n\nconst isGatsbyImageData = (\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageData | any\n): node is IGatsbyImageData =>\n  // 🦆 check for a deep prop to be sure this is a valid gatsbyImageData object\n  Boolean(node?.images?.fallback?.src)\n\nconst isGatsbyImageDataParent = <T>(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageDataParent<T> | any\n): node is IGatsbyImageDataParent<T> => Boolean(node?.gatsbyImageData)\n\nconst isGatsbyImageParent = <T>(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageParent<T> | any\n): node is IGatsbyImageParent<T> => Boolean(node?.gatsbyImage)\n\nexport type ImageDataLike =\n  | FileNode\n  | IGatsbyImageDataParent\n  | IGatsbyImageParent\n  | IGatsbyImageData\n\nexport const getImage = (\n  node: ImageDataLike | null\n): IGatsbyImageData | undefined => {\n  // This checks both for gatsbyImageData and gatsbyImage\n  if (isGatsbyImageData(node)) {\n    return node\n  }\n  // gatsbyImageData GraphQL field\n  if (isGatsbyImageDataParent(node)) {\n    return node.gatsbyImageData\n  }\n  // gatsbyImage GraphQL field for Gatsby's Image CDN service\n  if (isGatsbyImageParent(node)) {\n    return node.gatsbyImage\n  }\n  return node?.childImageSharp?.gatsbyImageData\n}\n\nexport const getSrc = (node: ImageDataLike): string | undefined =>\n  getImage(node)?.images?.fallback?.src\n\nexport const getSrcSet = (node: ImageDataLike): string | undefined =>\n  getImage(node)?.images?.fallback?.srcSet\n\nexport function getWrapperProps(\n  width: number,\n  height: number,\n  layout: Layout\n): Pick<HTMLAttributes<HTMLElement>, \"className\" | \"style\"> & {\n  \"data-gatsby-image-wrapper\": string\n} {\n  const wrapperStyle: CSSProperties = {}\n\n  let className = `gatsby-image-wrapper`\n\n  // If the plugin isn't installed we need to apply the styles inline\n  if (!gatsbyImageIsInstalled()) {\n    wrapperStyle.position = `relative`\n    wrapperStyle.overflow = `hidden`\n  }\n\n  if (layout === `fixed`) {\n    wrapperStyle.width = width\n    wrapperStyle.height = height\n  } else if (layout === `constrained`) {\n    if (!gatsbyImageIsInstalled()) {\n      wrapperStyle.display = `inline-block`\n      wrapperStyle.verticalAlign = `top`\n    }\n    className = `gatsby-image-wrapper gatsby-image-wrapper-constrained`\n  }\n\n  return {\n    className,\n    \"data-gatsby-image-wrapper\": ``,\n    style: wrapperStyle,\n  }\n}\n\nexport interface IUrlBuilderArgs<OptionsType> {\n  width: number\n  height: number\n  baseUrl: string\n  format: ImageFormat\n  options: OptionsType\n}\nexport interface IGetImageDataArgs<OptionsType = Record<string, unknown>> {\n  baseUrl: string\n  /**\n   * For constrained and fixed images, the size of the image element\n   */\n  width?: number\n  height?: number\n  /**\n   * If available, pass the source image width and height\n   */\n  sourceWidth?: number\n  sourceHeight?: number\n  /**\n   * If only one dimension is passed, then this will be used to calculate the other.\n   */\n  aspectRatio?: number\n  layout?: Layout\n  /**\n   * Returns a URL based on the passed arguments. Should be a pure function\n   */\n  urlBuilder: (args: IUrlBuilderArgs<OptionsType>) => string\n\n  /**\n   * Should be a data URI\n   */\n  placeholderURL?: string\n  backgroundColor?: string\n  /**\n   * Used in error messages etc\n   */\n  pluginName?: string\n\n  /**\n   * If you do not support auto-format, pass an array of image types here\n   */\n  formats?: Array<ImageFormat>\n\n  breakpoints?: Array<number>\n\n  /**\n   * Passed to the urlBuilder function\n   */\n  options?: OptionsType\n}\n\n/**\n * Use this hook to generate gatsby-plugin-image data in the browser.\n */\nexport function getImageData<OptionsType>({\n  baseUrl,\n  urlBuilder,\n  sourceWidth,\n  sourceHeight,\n  pluginName = `getImageData`,\n  formats = [`auto`],\n  breakpoints,\n  options,\n  ...props\n}: IGetImageDataArgs<OptionsType>): IGatsbyImageData {\n  if (\n    !breakpoints?.length &&\n    (props.layout === `fullWidth` || (props.layout as string) === `FULL_WIDTH`)\n  ) {\n    breakpoints = EVERY_BREAKPOINT\n  }\n  const generateImageSource = (\n    baseUrl: string,\n    width: number,\n    height?: number,\n    format?: ImageFormat\n  ): IImage => {\n    return {\n      width,\n      height,\n      format,\n      src: urlBuilder({ baseUrl, width, height, options, format }),\n    }\n  }\n\n  const sourceMetadata: IGatsbyImageHelperArgs[\"sourceMetadata\"] = {\n    width: sourceWidth,\n    height: sourceHeight,\n    format: `auto`,\n  }\n\n  const args: IGatsbyImageHelperArgs = {\n    ...props,\n    pluginName,\n    generateImageSource,\n    filename: baseUrl,\n    formats,\n    breakpoints,\n    sourceMetadata,\n  }\n  return generateImageData(args)\n}\n\nexport function getMainProps(\n  isLoading: boolean,\n  isLoaded: boolean,\n  images: IGatsbyImageData[\"images\"],\n  loading?: \"eager\" | \"lazy\",\n  style: CSSProperties = {}\n): Partial<MainImageProps> {\n  // fallback when it's not configured in gatsby-config.\n  if (!gatsbyImageIsInstalled()) {\n    style = {\n      height: `100%`,\n      left: 0,\n      position: `absolute`,\n      top: 0,\n      transform: `translateZ(0)`,\n      transition: `opacity 250ms linear`,\n      width: `100%`,\n      willChange: `opacity`,\n      ...style,\n    }\n  }\n\n  const result = {\n    ...images,\n    loading,\n    shouldLoad: isLoading,\n    \"data-main-image\": ``,\n    style: {\n      ...style,\n      opacity: isLoaded ? 1 : 0,\n    },\n  }\n\n  return result\n}\n\nexport type PlaceholderImageAttrs = ImgHTMLAttributes<HTMLImageElement> &\n  Pick<PlaceholderProps, \"sources\" | \"fallback\"> & {\n    \"data-placeholder-image\"?: string\n  }\n\nexport function getPlaceholderProps(\n  placeholder: PlaceholderImageAttrs | undefined,\n  isLoaded: boolean,\n  layout: Layout,\n  width?: number,\n  height?: number,\n  backgroundColor?: string,\n  objectFit?: CSSProperties[\"objectFit\"],\n  objectPosition?: CSSProperties[\"objectPosition\"]\n): PlaceholderImageAttrs {\n  const wrapperStyle: CSSProperties = {}\n\n  if (backgroundColor) {\n    wrapperStyle.backgroundColor = backgroundColor\n\n    if (layout === `fixed`) {\n      wrapperStyle.width = width\n      wrapperStyle.height = height\n      wrapperStyle.backgroundColor = backgroundColor\n      wrapperStyle.position = `relative`\n    } else if (layout === `constrained`) {\n      wrapperStyle.position = `absolute`\n      wrapperStyle.top = 0\n      wrapperStyle.left = 0\n      wrapperStyle.bottom = 0\n      wrapperStyle.right = 0\n    } else if (layout === `fullWidth`) {\n      wrapperStyle.position = `absolute`\n      wrapperStyle.top = 0\n      wrapperStyle.left = 0\n      wrapperStyle.bottom = 0\n      wrapperStyle.right = 0\n    }\n  }\n\n  if (objectFit) {\n    wrapperStyle.objectFit = objectFit\n  }\n\n  if (objectPosition) {\n    wrapperStyle.objectPosition = objectPosition\n  }\n  const result: PlaceholderImageAttrs = {\n    ...placeholder,\n    \"aria-hidden\": true,\n    \"data-placeholder-image\": ``,\n    style: {\n      opacity: isLoaded ? 0 : 1,\n      transition: `opacity 500ms linear`,\n      ...wrapperStyle,\n    },\n  }\n\n  // fallback when it's not configured in gatsby-config.\n  if (!gatsbyImageIsInstalled()) {\n    result.style = {\n      height: `100%`,\n      left: 0,\n      position: `absolute`,\n      top: 0,\n      width: `100%`,\n    }\n  }\n\n  return result\n}\n\nexport interface IArtDirectedImage {\n  media: string\n  image: IGatsbyImageData\n}\n\n/**\n * Generate a Gatsby image data object with multiple, art-directed images that display at different\n * resolutions.\n *\n * @param defaultImage The image displayed when no media query matches.\n * It is also used for all other settings applied to the image, such as width, height and layout.\n * You should pass a className to the component with media queries to adjust the size of the container,\n * as this cannot be adjusted automatically.\n * @param artDirected Array of objects which each contains a `media` string which is a media query\n * such as `(min-width: 320px)`, and the image object to use when that query matches.\n */\nexport function withArtDirection(\n  defaultImage: IGatsbyImageData,\n  artDirected: Array<IArtDirectedImage>\n): IGatsbyImageData {\n  const { images, placeholder, ...props } = defaultImage\n  const output: IGatsbyImageData = {\n    ...props,\n    images: {\n      ...images,\n      sources: [],\n    },\n    placeholder: placeholder && {\n      ...placeholder,\n      sources: [],\n    },\n  }\n\n  artDirected.forEach(({ media, image }) => {\n    if (!media) {\n      if (process.env.NODE_ENV === `development`) {\n        console.warn(\n          \"[gatsby-plugin-image] All art-directed images passed to must have a value set for `media`. Skipping.\"\n        )\n      }\n      return\n    }\n\n    if (\n      image.layout !== defaultImage.layout &&\n      process.env.NODE_ENV === `development`\n    ) {\n      console.warn(\n        `[gatsby-plugin-image] Mismatched image layout: expected \"${defaultImage.layout}\" but received \"${image.layout}\". All art-directed images use the same layout as the default image`\n      )\n    }\n\n    output.images.sources.push(\n      ...image.images.sources.map(source => {\n        return { ...source, media }\n      }),\n      {\n        media,\n        srcSet: image.images.fallback.srcSet,\n      }\n    )\n\n    if (!output.placeholder) {\n      return\n    }\n\n    output.placeholder.sources.push({\n      media,\n      srcSet: image.placeholder.fallback,\n    })\n  })\n  output.images.sources.push(...images.sources)\n  if (placeholder?.sources) {\n    output.placeholder?.sources.push(...placeholder.sources)\n  }\n  return output\n}\n","import React, { FunctionComponent, ImgHTMLAttributes } from \"react\"\nimport * as PropTypes from \"prop-types\"\n\nexport interface IResponsiveImageProps {\n  sizes?: string\n  srcSet: string\n}\n\nexport type SourceProps = IResponsiveImageProps &\n  (\n    | {\n        media: string\n        type?: string\n      }\n    | {\n        media?: string\n        type: string\n      }\n  )\n\ntype FallbackProps = { src: string } & Partial<IResponsiveImageProps>\n\ntype ImageProps = ImgHTMLAttributes<HTMLImageElement> & {\n  src: string\n  alt: string\n  shouldLoad: boolean\n}\n\nexport type PictureProps = ImgHTMLAttributes<HTMLImageElement> & {\n  fallback?: FallbackProps\n  sources?: Array<SourceProps>\n  alt: string\n  shouldLoad?: boolean\n}\n\nconst Image: FunctionComponent<ImageProps> = function Image({\n  src,\n  srcSet,\n  loading,\n  alt = ``,\n  shouldLoad,\n  ...props\n}) {\n  return (\n    <img\n      {...props}\n      decoding=\"async\"\n      loading={loading}\n      src={shouldLoad ? src : undefined}\n      data-src={!shouldLoad ? src : undefined}\n      srcSet={shouldLoad ? srcSet : undefined}\n      data-srcset={!shouldLoad ? srcSet : undefined}\n      alt={alt}\n    />\n  )\n}\n\nexport const Picture: React.FC<PictureProps> = function Picture({\n  fallback,\n  sources = [],\n  shouldLoad = true,\n  ...props\n}) {\n  const sizes = props.sizes || fallback?.sizes\n  const fallbackImage = (\n    <Image {...props} {...fallback} sizes={sizes} shouldLoad={shouldLoad} />\n  )\n\n  if (!sources.length) {\n    return fallbackImage\n  }\n\n  return (\n    <picture>\n      {sources.map(({ media, srcSet, type }) => (\n        <source\n          key={`${media}-${type}-${srcSet}`}\n          type={type}\n          media={media}\n          srcSet={shouldLoad ? srcSet : undefined}\n          data-srcset={!shouldLoad ? srcSet : undefined}\n          sizes={sizes}\n        />\n      ))}\n      {fallbackImage}\n    </picture>\n  )\n}\n\nImage.propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: PropTypes.string.isRequired,\n  sizes: PropTypes.string,\n  srcSet: PropTypes.string,\n  shouldLoad: PropTypes.bool,\n}\n\nPicture.displayName = `Picture`\nPicture.propTypes = {\n  alt: PropTypes.string.isRequired,\n  shouldLoad: PropTypes.bool,\n  fallback: PropTypes.exact({\n    src: PropTypes.string.isRequired,\n    srcSet: PropTypes.string,\n    sizes: PropTypes.string,\n  }),\n  sources: PropTypes.arrayOf(\n    PropTypes.oneOfType([\n      PropTypes.exact({\n        media: PropTypes.string.isRequired,\n        type: PropTypes.string,\n        sizes: PropTypes.string,\n        srcSet: PropTypes.string.isRequired,\n      }),\n      PropTypes.exact({\n        media: PropTypes.string,\n        type: PropTypes.string.isRequired,\n        sizes: PropTypes.string,\n        srcSet: PropTypes.string.isRequired,\n      }),\n    ])\n  ),\n}\n","import React, { Fragment, FunctionComponent } from \"react\"\nimport terserMacro from \"../../macros/terser.macro\"\nimport { Layout } from \"../image-utils\"\n\nexport interface ILayoutWrapperProps {\n  layout: Layout\n  width: number\n  height: number\n}\n\nconst NativeScriptLoading: FunctionComponent = () => (\n  <script\n    type=\"module\"\n    dangerouslySetInnerHTML={{\n      __html: terserMacro`\nconst hasNativeLazyLoadSupport = typeof HTMLImageElement !== \"undefined\" && \"loading\" in HTMLImageElement.prototype;\nif (hasNativeLazyLoadSupport) {\n  const gatsbyImages = document.querySelectorAll('img[data-main-image]');\n  for (let mainImage of gatsbyImages) {\n    if (mainImage.dataset.src) {\n      mainImage.setAttribute('src', mainImage.dataset.src)\n      mainImage.removeAttribute('data-src')\n    }\n    if (mainImage.dataset.srcset) {\n      mainImage.setAttribute('srcset', mainImage.dataset.srcset)\n      mainImage.removeAttribute('data-srcset')\n    }\n\n    const sources = mainImage.parentNode.querySelectorAll('source[data-srcset]');\n    for (let source of sources) {\n      source.setAttribute('srcset', source.dataset.srcset)\n      source.removeAttribute('data-srcset')\n    }\n\n    if (mainImage.complete) {\n      mainImage.style.opacity = 1;\n\n      // also hide the placeholder\n      mainImage.parentNode.parentNode.querySelector('[data-placeholder-image]').style.opacity = 0;\n    }\n  }\n}\n`,\n    }}\n  />\n)\n\nexport function getSizer(\n  layout: Layout,\n  width: number,\n  height: number\n): string {\n  let sizer = ``\n  if (layout === `fullWidth`) {\n    sizer = `<div aria-hidden=\"true\" style=\"padding-top: ${\n      (height / width) * 100\n    }%;\"></div>`\n  }\n\n  if (layout === `constrained`) {\n    sizer = `<div style=\"max-width: ${width}px; display: block;\"><img alt=\"\" role=\"presentation\" aria-hidden=\"true\" src=\"data:image/svg+xml;charset=utf-8,%3Csvg height='${height}' width='${width}' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E\" style=\"max-width: 100%; display: block; position: static;\"></div>`\n  }\n\n  return sizer\n}\n\nconst Sizer: FunctionComponent<ILayoutWrapperProps> = function Sizer({\n  layout,\n  width,\n  height,\n}) {\n  if (layout === `fullWidth`) {\n    return (\n      <div aria-hidden style={{ paddingTop: `${(height / width) * 100}%` }} />\n    )\n  }\n\n  if (layout === `constrained`) {\n    return (\n      <div style={{ maxWidth: width, display: `block` }}>\n        <img\n          alt=\"\"\n          role=\"presentation\"\n          aria-hidden=\"true\"\n          src={`data:image/svg+xml;charset=utf-8,%3Csvg height='${height}' width='${width}' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E`}\n          style={{\n            maxWidth: `100%`,\n            display: `block`,\n            position: `static`,\n          }}\n        />\n      </div>\n    )\n  }\n\n  return null\n}\n\nexport const LayoutWrapper: FunctionComponent<ILayoutWrapperProps> =\n  function LayoutWrapper({ children, ...props }) {\n    return (\n      <Fragment>\n        <Sizer {...props} />\n        {children}\n\n        {SERVER ? <NativeScriptLoading /> : null}\n      </Fragment>\n    )\n  }\n","import React, { FunctionComponent, ImgHTMLAttributes } from \"react\"\nimport * as PropTypes from \"prop-types\"\nimport { Picture, SourceProps } from \"./picture\"\n\nexport type PlaceholderProps = ImgHTMLAttributes<HTMLImageElement> & {\n  fallback?: string\n  sources?: Array<SourceProps>\n}\n\nexport const Placeholder: FunctionComponent<PlaceholderProps> =\n  function Placeholder({ fallback, ...props }) {\n    if (fallback) {\n      return (\n        <Picture\n          {...props}\n          fallback={{\n            src: fallback,\n          }}\n          aria-hidden\n          alt=\"\"\n        />\n      )\n    } else {\n      return <div {...props}></div>\n    }\n  }\n\nPlaceholder.displayName = `Placeholder`\nPlaceholder.propTypes = {\n  fallback: PropTypes.string,\n  sources: Picture.propTypes?.sources,\n  alt: function (props, propName, componentName): Error | null {\n    if (!props[propName]) {\n      return null\n    }\n\n    return new Error(\n      `Invalid prop \\`${propName}\\` supplied to \\`${componentName}\\`. Validation failed.`\n    )\n  },\n}\n","import React from \"react\"\nimport { Picture, PictureProps } from \"./picture\"\n\nexport type MainImageProps = PictureProps\n\nexport const MainImage: React.FC<PictureProps> = function MainImage(props) {\n  return (\n    <>\n      <Picture {...props} />\n      <noscript>\n        <Picture {...props} shouldLoad={true} />\n      </noscript>\n    </>\n  )\n}\n\nMainImage.displayName = `MainImage`\nMainImage.propTypes = Picture.propTypes\n","import {\n  createElement,\n  memo,\n  useMemo,\n  useEffect,\n  useLayoutEffect,\n  useRef,\n} from \"react\"\nimport {\n  getWrapperProps,\n  gatsbyImageIsInstalled,\n  hasNativeLazyLoadSupport,\n} from \"./hooks\"\nimport { getSizer } from \"./layout-wrapper\"\nimport { propTypes } from \"./gatsby-image.server\"\nimport type {\n  FC,\n  ElementType,\n  FunctionComponent,\n  ImgHTMLAttributes,\n  CSSProperties,\n  ReactEventHandler,\n} from \"react\"\nimport type { renderImageToString } from \"./lazy-hydrate\"\nimport type { PlaceholderProps } from \"./placeholder\"\nimport type { MainImageProps } from \"./main-image\"\nimport type { Layout } from \"../image-utils\"\n\nconst imageCache = new Set<string>()\nlet renderImageToStringPromise\nlet renderImage: typeof renderImageToString | undefined\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport interface GatsbyImageProps\n  extends Omit<\n    ImgHTMLAttributes<HTMLImageElement>,\n    \"placeholder\" | \"onLoad\" | \"src\" | \"srcSet\" | \"width\" | \"height\"\n  > {\n  alt: string\n  as?: ElementType\n  className?: string\n  class?: string\n  imgClassName?: string\n  image: IGatsbyImageData\n  imgStyle?: CSSProperties\n  backgroundColor?: string\n  objectFit?: CSSProperties[\"objectFit\"]\n  objectPosition?: CSSProperties[\"objectPosition\"]\n  onLoad?: (props: { wasCached: boolean }) => void\n  onError?: ReactEventHandler<HTMLImageElement>\n  onStartLoad?: (props: { wasCached: boolean }) => void\n}\n\nexport interface IGatsbyImageData {\n  layout: Layout\n  width: number\n  height: number\n  backgroundColor?: string\n  images: Pick<MainImageProps, \"sources\" | \"fallback\">\n  placeholder?: Pick<PlaceholderProps, \"sources\" | \"fallback\">\n}\n\nconst GatsbyImageHydrator: FC<GatsbyImageProps> = function GatsbyImageHydrator({\n  as = `div`,\n  image,\n  style,\n  backgroundColor,\n  className,\n  class: preactClass,\n  onStartLoad,\n  onLoad,\n  onError,\n  ...props\n}) {\n  const { width, height, layout } = image\n  const {\n    style: wStyle,\n    className: wClass,\n    ...wrapperProps\n  } = getWrapperProps(width, height, layout)\n  const root = useRef<HTMLElement>()\n  const cacheKey = useMemo(() => JSON.stringify(image.images), [image.images])\n\n  // Preact uses class instead of className so we need to check for both\n  if (preactClass) {\n    className = preactClass\n  }\n\n  const sizer = getSizer(layout, width, height)\n\n  useEffect(() => {\n    if (!renderImageToStringPromise) {\n      renderImageToStringPromise = import(`./lazy-hydrate`).then(\n        ({ renderImageToString, swapPlaceholderImage }) => {\n          renderImage = renderImageToString\n\n          return {\n            renderImageToString,\n            swapPlaceholderImage,\n          }\n        }\n      )\n    }\n\n    // The plugin image component is a bit special where if it's server-side rendered, we add extra script tags to support lazy-loading without\n    // In this case we stop hydration but fire the correct events.\n    const ssrImage = root.current.querySelector(\n      `[data-gatsby-image-ssr]`\n    ) as HTMLImageElement\n    if (ssrImage && hasNativeLazyLoadSupport()) {\n      if (ssrImage.complete) {\n        // Trigger onStartload and onLoad events\n        onStartLoad?.({\n          wasCached: true,\n        })\n        onLoad?.({\n          wasCached: true,\n        })\n\n        // remove ssr key for state updates but add delay to not fight with native code snippt of gatsby-ssr\n        setTimeout(() => {\n          ssrImage.removeAttribute(`data-gatsby-image-ssr`)\n        }, 0)\n      } else {\n        onStartLoad?.({\n          wasCached: true,\n        })\n\n        ssrImage.addEventListener(`load`, function onLoadListener() {\n          ssrImage.removeEventListener(`load`, onLoadListener)\n\n          onLoad?.({\n            wasCached: true,\n          })\n          // remove ssr key for state updates but add delay to not fight with native code snippt of gatsby-ssr\n          setTimeout(() => {\n            ssrImage.removeAttribute(`data-gatsby-image-ssr`)\n          }, 0)\n        })\n      }\n\n      imageCache.add(cacheKey)\n\n      return\n    }\n\n    if (renderImage && imageCache.has(cacheKey)) {\n      return\n    }\n\n    let animationFrame\n    let cleanupCallback\n    renderImageToStringPromise.then(\n      ({ renderImageToString, swapPlaceholderImage }) => {\n        if (!root.current) {\n          return\n        }\n\n        root.current.innerHTML = renderImageToString({\n          isLoading: true,\n          isLoaded: imageCache.has(cacheKey),\n          image,\n          ...props,\n        })\n\n        if (!imageCache.has(cacheKey)) {\n          animationFrame = requestAnimationFrame(() => {\n            if (root.current) {\n              cleanupCallback = swapPlaceholderImage(\n                root.current,\n                cacheKey,\n                imageCache,\n                style,\n                onStartLoad,\n                onLoad,\n                onError\n              )\n            }\n          })\n        }\n      }\n    )\n\n    // eslint-disable-next-line consistent-return\n    return (): void => {\n      if (animationFrame) {\n        cancelAnimationFrame(animationFrame)\n      }\n      if (cleanupCallback) {\n        cleanupCallback()\n      }\n    }\n  }, [image])\n\n  // useLayoutEffect is ran before React commits to the DOM. This allows us to make sure our HTML is using our cached image version\n  useLayoutEffect(() => {\n    if (imageCache.has(cacheKey) && renderImage) {\n      root.current.innerHTML = renderImage({\n        isLoading: imageCache.has(cacheKey),\n        isLoaded: imageCache.has(cacheKey),\n        image,\n        ...props,\n      })\n\n      // Trigger onStartload and onLoad events\n      onStartLoad?.({\n        wasCached: true,\n      })\n      onLoad?.({\n        wasCached: true,\n      })\n    }\n  }, [image])\n\n  // By keeping all props equal React will keep the component in the DOM\n  return createElement(as, {\n    ...wrapperProps,\n    style: {\n      ...wStyle,\n      ...style,\n      backgroundColor,\n    },\n    className: `${wClass}${className ? ` ${className}` : ``}`,\n    ref: root,\n    dangerouslySetInnerHTML: {\n      __html: sizer,\n    },\n    suppressHydrationWarning: true,\n  })\n}\n\nexport const GatsbyImage: FunctionComponent<GatsbyImageProps> = memo(\n  function GatsbyImage(props) {\n    if (!props.image) {\n      if (process.env.NODE_ENV === `development`) {\n        console.warn(`[gatsby-plugin-image] Missing image prop`)\n      }\n\n      return null\n    }\n\n    if (!gatsbyImageIsInstalled() && process.env.NODE_ENV === `development`) {\n      console.warn(\n        `[gatsby-plugin-image] You're missing out on some cool performance features. Please add \"gatsby-plugin-image\" to your gatsby-config.js`\n      )\n    }\n\n    return createElement(GatsbyImageHydrator, props)\n  }\n)\n\nGatsbyImage.propTypes = propTypes\nGatsbyImage.displayName = `GatsbyImage`\n","import React from \"react\"\nimport { getWrapperProps, getMainProps, getPlaceholderProps } from \"./hooks\"\nimport { Placeholder } from \"./placeholder\"\nimport { MainImage, MainImageProps } from \"./main-image\"\nimport { LayoutWrapper } from \"./layout-wrapper\"\nimport PropTypes from \"prop-types\"\nimport type { FunctionComponent, WeakValidationMap } from \"react\"\nimport type { GatsbyImageProps, IGatsbyImageData } from \"./gatsby-image.browser\"\n\nconst removeNewLines = (str: string): string => str.replace(/\\n/g, ``)\n\nexport const GatsbyImage: FunctionComponent<GatsbyImageProps> =\n  function GatsbyImage({\n    as = `div`,\n    className,\n    class: preactClass,\n    style,\n    image,\n    loading = `lazy`,\n    imgClassName,\n    imgStyle,\n    backgroundColor,\n    objectFit,\n    objectPosition,\n    ...props\n  }) {\n    if (!image) {\n      console.warn(`[gatsby-plugin-image] Missing image prop`)\n      return null\n    }\n\n    if (preactClass) {\n      className = preactClass\n    }\n\n    imgStyle = {\n      objectFit,\n      objectPosition,\n      backgroundColor,\n      ...imgStyle,\n    }\n\n    const {\n      width,\n      height,\n      layout,\n      images,\n      placeholder,\n      backgroundColor: placeholderBackgroundColor,\n    } = image\n\n    const {\n      style: wStyle,\n      className: wClass,\n      ...wrapperProps\n    } = getWrapperProps(width, height, layout)\n\n    const cleanedImages: IGatsbyImageData[\"images\"] = {\n      fallback: undefined,\n      sources: [],\n    }\n    if (images.fallback) {\n      cleanedImages.fallback = {\n        ...images.fallback,\n        srcSet: images.fallback.srcSet\n          ? removeNewLines(images.fallback.srcSet)\n          : undefined,\n      }\n    }\n\n    if (images.sources) {\n      cleanedImages.sources = images.sources.map(source => {\n        return {\n          ...source,\n          srcSet: removeNewLines(source.srcSet),\n        }\n      })\n    }\n\n    return React.createElement(\n      as,\n      {\n        ...wrapperProps,\n        style: {\n          ...wStyle,\n          ...style,\n          backgroundColor,\n        },\n        className: `${wClass}${className ? ` ${className}` : ``}`,\n      },\n      <LayoutWrapper layout={layout} width={width} height={height}>\n        <Placeholder\n          {...getPlaceholderProps(\n            placeholder,\n            false,\n            layout,\n            width,\n            height,\n            placeholderBackgroundColor,\n            objectFit,\n            objectPosition\n          )}\n        />\n\n        <MainImage\n          data-gatsby-image-ssr=\"\"\n          className={imgClassName}\n          {...(props as Omit<\n            MainImageProps,\n            \"images\" | \"fallback\" | \"onError\" | \"onLoad\"\n          >)}\n          // When eager is set we want to start the isLoading state on true (we want to load the img without react)\n          {...getMainProps(\n            loading === `eager`,\n            false,\n            cleanedImages,\n            loading,\n            imgStyle\n          )}\n        />\n      </LayoutWrapper>\n    )\n  }\n\nexport const altValidator: PropTypes.Validator<string> = (\n  props: GatsbyImageProps,\n  propName,\n  componentName,\n  ...rest\n): Error | undefined => {\n  if (!props.alt && props.alt !== ``) {\n    return new Error(\n      `The \"alt\" prop is required in ${componentName}. If the image is purely presentational then pass an empty string: e.g. alt=\"\". Learn more: https://a11y-style-guide.com/style-guide/section-media.html`\n    )\n  }\n\n  return PropTypes.string(props, propName, componentName, ...rest)\n}\n\nexport const propTypes = {\n  image: PropTypes.object.isRequired,\n  alt: altValidator,\n} as WeakValidationMap<GatsbyImageProps>\n","import React, { FunctionComponent, ReactElement } from \"react\"\nimport {\n  altValidator,\n  GatsbyImage as GatsbyImageServer,\n} from \"./gatsby-image.server\"\nimport { GatsbyImageProps, IGatsbyImageData } from \"./gatsby-image.browser\"\nimport PropTypes from \"prop-types\"\nimport { ISharpGatsbyImageArgs } from \"../image-utils\"\n\nexport interface IStaticImageProps\n  extends Omit<GatsbyImageProps, \"image\">,\n    Omit<ISharpGatsbyImageArgs, \"backgroundColor\"> {\n  src: string\n}\n\n// These values are added by Babel. Do not add them manually\ninterface IPrivateProps {\n  __imageData?: IGatsbyImageData\n  __error?: string\n}\n\nexport function _getStaticImage(\n  GatsbyImage: FunctionComponent<GatsbyImageProps>\n): React.FC<IStaticImageProps & IPrivateProps> {\n  return function StaticImage({\n    src,\n    __imageData: imageData,\n    __error,\n    // We extract these because they're not meant to be passed-down to GatsbyImage\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    width,\n    height,\n    aspectRatio,\n    tracedSVGOptions,\n    placeholder,\n    formats,\n    quality,\n    transformOptions,\n    jpgOptions,\n    pngOptions,\n    webpOptions,\n    avifOptions,\n    blurredOptions,\n    breakpoints,\n    outputPixelDensities,\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n    ...props\n  }): ReactElement {\n    if (__error) {\n      console.warn(__error)\n    }\n\n    if (imageData) {\n      return <GatsbyImage image={imageData} {...props} />\n    }\n    console.warn(`Image not loaded`, src)\n    if (!__error && process.env.NODE_ENV === `development`) {\n      console.warn(\n        `Please ensure that \"gatsby-plugin-image\" is included in the plugins array in gatsby-config.js, and that your version of gatsby is at least 2.24.78`\n      )\n    }\n    return null\n  }\n}\n\nconst StaticImage: React.FC<IStaticImageProps & IPrivateProps> =\n  _getStaticImage(GatsbyImageServer)\n\nconst checkDimensionProps: PropTypes.Validator<number> = (\n  props: IStaticImageProps & IPrivateProps,\n  propName: keyof IStaticImageProps & IPrivateProps,\n  ...rest\n) => {\n  if (\n    props.layout === `fullWidth` &&\n    (propName === `width` || propName === `height`) &&\n    props[propName]\n  ) {\n    return new Error(\n      `\"${propName}\" ${props[propName]} may not be passed when layout is fullWidth.`\n    )\n  }\n  return PropTypes.number(props, propName, ...rest)\n}\n\nconst validLayouts = new Set([`fixed`, `fullWidth`, `constrained`])\n\nexport const propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: altValidator,\n  width: checkDimensionProps,\n  height: checkDimensionProps,\n  sizes: PropTypes.string,\n  layout: (props: IStaticImageProps & IPrivateProps): Error | undefined => {\n    if (props.layout === undefined) {\n      return undefined\n    }\n    if (validLayouts.has(props.layout)) {\n      return undefined\n    }\n\n    return new Error(\n      `Invalid value ${props.layout}\" provided for prop \"layout\". Defaulting to \"constrained\". Valid values are \"fixed\", \"fullWidth\" or \"constrained\".`\n    )\n  },\n}\n\nStaticImage.displayName = `StaticImage`\nStaticImage.propTypes = propTypes\n\nexport { StaticImage }\n","import {\n  GatsbyImage as GatsbyImageBrowser,\n  IGatsbyImageData,\n} from \"./gatsby-image.browser\"\nimport React from \"react\"\nimport {\n  _getStaticImage,\n  propTypes,\n  IStaticImageProps,\n} from \"./static-image.server\"\n// These values are added by Babel. Do not add them manually\ninterface IPrivateProps {\n  __imageData?: IGatsbyImageData\n  __error?: string\n}\n\nconst StaticImage: React.FC<IStaticImageProps & IPrivateProps> =\n  _getStaticImage(GatsbyImageBrowser)\n\nStaticImage.displayName = `StaticImage`\nStaticImage.propTypes = propTypes\n\nexport { StaticImage }\n","'use strict';\n\nconst preserveCamelCase = string => {\n\tlet isLastCharLower = false;\n\tlet isLastCharUpper = false;\n\tlet isLastLastCharUpper = false;\n\n\tfor (let i = 0; i < string.length; i++) {\n\t\tconst character = string[i];\n\n\t\tif (isLastCharLower && /[a-zA-Z]/.test(character) && character.toUpperCase() === character) {\n\t\t\tstring = string.slice(0, i) + '-' + string.slice(i);\n\t\t\tisLastCharLower = false;\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = true;\n\t\t\ti++;\n\t\t} else if (isLastCharUpper && isLastLastCharUpper && /[a-zA-Z]/.test(character) && character.toLowerCase() === character) {\n\t\t\tstring = string.slice(0, i - 1) + '-' + string.slice(i - 1);\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = false;\n\t\t\tisLastCharLower = true;\n\t\t} else {\n\t\t\tisLastCharLower = character.toLowerCase() === character && character.toUpperCase() !== character;\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = character.toUpperCase() === character && character.toLowerCase() !== character;\n\t\t}\n\t}\n\n\treturn string;\n};\n\nconst camelCase = (input, options) => {\n\tif (!(typeof input === 'string' || Array.isArray(input))) {\n\t\tthrow new TypeError('Expected the input to be `string | string[]`');\n\t}\n\n\toptions = Object.assign({\n\t\tpascalCase: false\n\t}, options);\n\n\tconst postProcess = x => options.pascalCase ? x.charAt(0).toUpperCase() + x.slice(1) : x;\n\n\tif (Array.isArray(input)) {\n\t\tinput = input.map(x => x.trim())\n\t\t\t.filter(x => x.length)\n\t\t\t.join('-');\n\t} else {\n\t\tinput = input.trim();\n\t}\n\n\tif (input.length === 0) {\n\t\treturn '';\n\t}\n\n\tif (input.length === 1) {\n\t\treturn options.pascalCase ? input.toUpperCase() : input.toLowerCase();\n\t}\n\n\tconst hasUpperCase = input !== input.toLowerCase();\n\n\tif (hasUpperCase) {\n\t\tinput = preserveCamelCase(input);\n\t}\n\n\tinput = input\n\t\t.replace(/^[_.\\- ]+/, '')\n\t\t.toLowerCase()\n\t\t.replace(/[_.\\- ]+(\\w|$)/g, (_, p1) => p1.toUpperCase())\n\t\t.replace(/\\d+(\\w|$)/g, m => m.toUpperCase());\n\n\treturn postProcess(input);\n};\n\nmodule.exports = camelCase;\n// TODO: Remove this for the next major release\nmodule.exports.default = camelCase;\n"],"names":["defaultCardsPerRow","map","value","index","widths","minWidth","cards","length","Cards","_a","ref","_b","items","cardDefinition","_c","cardsPerRow","header","filter","pagination","preferences","empty","loading","loadingText","trackBy","selectedItems","selectionType","isItemDisabled","onSelectionChange","ariaLabels","visibleSections","stickyHeader","stickyHeaderVerticalOffset","_d","variant","rest","__internalRootRef","baseProps","isRefresh","computedVariant","instanceUniqueId","cardsId","id","cardsHeaderId","concat","undefined","_e","width","config","slice","sort","a","b","some","layout","getCardsPerRow","columns","measureRef","refObject","useRef","mergedRef","_f","isItemSelected","getItemSelectionProps","updateShiftToggle","hasToolsHeader","headerRef","_g","_scrollToTop","scrollToTop","scrollToItem","status","useImperativeHandle","className","type","visible","disableContentPaddings","disableHeaderPaddings","__stickyHeader","__stickyOffset","__headerRef","__headerId","__darkHeader","CardsList","onFocus","event","currentTarget","ariaDescribedby","ariaLabelledby","selectable","moveFocusDown","moveFocusUp","visibleSectionsDefinition","sections","section","indexOf","listRole","listItemRole","role","item","key","onFocusDown","onFocusUp","onShiftToggle","content","style","Link","fontSize","color","external","props","baseComponentProps","height","prototype","node","images","_node$images","fallback","_node$images$fallback","src","Boolean","gatsbyImageData","gatsbyImage","childImageSharp","_node$childImageSharp","format","isLoading","isLoaded","shouldLoad","opacity","placeholder","backgroundColor","objectFit","objectPosition","wrapperStyle","position","top","left","bottom","right","transition","sources","fallbackImage","paddingTop","maxWidth","display","React","alt","children","Fragment","Sizer","t","srcSet","decoding","sizes","Image","media","propTypes","PropTypes","Picture","displayName","isRequired","Placeholder","_Picture$propTypes","propName","componentName","MainImage","image","altValidator","Set","e","onError","as","preactClass","class","onStartLoad","onLoad","overflow","wStyle","wClass","wrapperProps","useMemo","JSON","stringify","sizer","useEffect","renderImageToStringPromise","import","then","renderImageToString","swapPlaceholderImage","renderImage","root","current","querySelector","ssrImage","hasNativeLazyLoadSupport","complete","wasCached","setTimeout","removeAttribute","addEventListener","removeEventListener","onLoadListener","imageCache","add","cacheKey","has","innerHTML","animationFrame","requestAnimationFrame","cleanupCallback","cancelAnimationFrame","useLayoutEffect","dangerouslySetInnerHTML","__html","suppressHydrationWarning","memo","warn","GatsbyImageHydrator","GatsbyImage","checkDimensionProps","validLayouts","Error","GatsbyImageBrowser","__error","imageData","__imageData","console","StaticImage","camelCase","input","options","Array","isArray","TypeError","Object","assign","pascalCase","x","trim","join","toUpperCase","toLowerCase","string","isLastCharLower","isLastCharUpper","isLastLastCharUpper","i","character","test","preserveCamelCase","replace","_","p1","m","charAt","module","exports"],"sourceRoot":""}